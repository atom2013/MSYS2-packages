diff -Naur cmake-3.15.0-orig/bootstrap cmake-3.15.0/bootstrap
--- cmake-3.15.0-orig/bootstrap	2019-07-17 15:07:19.000000000 +0300
+++ cmake-3.15.0/bootstrap	2019-07-18 09:04:24.917692200 +0300
@@ -88,8 +88,15 @@
   cmake_system_cygwin=false
 fi
 
+# Determine whether this is a MSYS environment.
+if echo "${cmake_system}" | grep MSYS >/dev/null 2>&1; then
+  cmake_system_msys=true
+else
+  cmake_system_msys=false
+fi
+
 # Determine whether this is a MinGW environment.
-if echo "${cmake_system}" | grep 'MINGW\|MSYS' >/dev/null 2>&1; then
+if echo "${cmake_system}" | grep 'MINGW' >/dev/null 2>&1; then
   cmake_system_mingw=true
 else
   cmake_system_mingw=false
@@ -934,6 +941,10 @@
   cmake_ld_flags="${LDFLAGS} -Wl,--enable-auto-import"
 fi
 
+if ${cmake_system_msys}; then
+  cmake_ld_flags="${LDFLAGS} -Wl,--enable-auto-import"
+fi
+
 # Add CoreFoundation framework on Darwin
 if ${cmake_system_darwin}; then
   cmake_ld_flags="${LDFLAGS} -framework CoreFoundation"
@@ -955,6 +966,7 @@
 case "${cmake_system}" in
   *AIX*)   cmake_toolchains='XL GNU' ;;
   *CYGWIN*) cmake_toolchains='GNU' ;;
+  *MSYS*) cmake_toolchains='GNU' ;;
   *Darwin*) cmake_toolchains='Clang GNU' ;;
   *Linux*) cmake_toolchains='GNU Clang XL PGI PathScale' ;;
   *MINGW*) cmake_toolchains='GNU' ;;
diff -Naur cmake-3.15.0-orig/CMakeCPack.cmake cmake-3.15.0/CMakeCPack.cmake
--- cmake-3.15.0-orig/CMakeCPack.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/CMakeCPack.cmake	2019-07-18 09:04:24.933292200 +0300
@@ -41,6 +41,8 @@
   # cygwin is good for the system name
   if("x${CMAKE_SYSTEM_NAME}" STREQUAL "xCYGWIN")
     set(CPACK_SYSTEM_NAME Cygwin)
+  elseif("x${CMAKE_SYSTEM_NAME}" STREQUAL "xMSYS")
+    set(CPACK_SYSTEM_NAME MSYS)
   else()
     set(CPACK_SYSTEM_NAME ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR})
   endif()
@@ -99,7 +101,7 @@
 # Components
 if(CMake_INSTALL_COMPONENTS)
   set(_CPACK_IFW_COMPONENTS_ALL cmake ctest cpack)
-  if(WIN32 AND NOT CYGWIN)
+  if(WIN32 AND NOT CYGWIN AND NOT MSYS)
       list(APPEND _CPACK_IFW_COMPONENTS_ALL cmcldeps)
   endif()
   if(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME)
@@ -207,7 +209,7 @@
   # if the CPACK_PACKAGE_FILE_NAME is not defined by the cache
   # default to source package - system, on cygwin system is not
   # needed
-  if(CYGWIN)
+  if(CYGWIN OR MSYS)
     set(CPACK_PACKAGE_FILE_NAME "${CPACK_SOURCE_PACKAGE_FILE_NAME}")
   else()
     set(CPACK_PACKAGE_FILE_NAME
diff -Naur cmake-3.15.0-orig/Modules/CMakeCCompiler.cmake.in cmake-3.15.0/Modules/CMakeCCompiler.cmake.in
--- cmake-3.15.0-orig/Modules/CMakeCCompiler.cmake.in	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/CMakeCCompiler.cmake.in	2019-07-18 09:04:24.964492300 +0300
@@ -29,10 +29,15 @@
 set(CMAKE_C_ABI_COMPILED @CMAKE_C_ABI_COMPILED@)
 set(CMAKE_COMPILER_IS_MINGW @CMAKE_COMPILER_IS_MINGW@)
 set(CMAKE_COMPILER_IS_CYGWIN @CMAKE_COMPILER_IS_CYGWIN@)
+set(CMAKE_COMPILER_IS_MSYS @CMAKE_COMPILER_IS_MSYS@)
 if(CMAKE_COMPILER_IS_CYGWIN)
   set(CYGWIN 1)
   set(UNIX 1)
 endif()
+if(CMAKE_COMPILER_IS_MSYS)
+  set(MSYS 1)
+  set(UNIX 1)
+endif()
 
 set(CMAKE_C_COMPILER_ENV_VAR "CC")
 
diff -Naur cmake-3.15.0-orig/Modules/CMakeCXXCompiler.cmake.in cmake-3.15.0/Modules/CMakeCXXCompiler.cmake.in
--- cmake-3.15.0-orig/Modules/CMakeCXXCompiler.cmake.in	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/CMakeCXXCompiler.cmake.in	2019-07-18 09:04:24.964492300 +0300
@@ -31,10 +31,15 @@
 set(CMAKE_CXX_ABI_COMPILED @CMAKE_CXX_ABI_COMPILED@)
 set(CMAKE_COMPILER_IS_MINGW @CMAKE_COMPILER_IS_MINGW@)
 set(CMAKE_COMPILER_IS_CYGWIN @CMAKE_COMPILER_IS_CYGWIN@)
+set(CMAKE_COMPILER_IS_MSYS @CMAKE_COMPILER_IS_MSYS@)
 if(CMAKE_COMPILER_IS_CYGWIN)
   set(CYGWIN 1)
   set(UNIX 1)
 endif()
+if(CMAKE_COMPILER_IS_MSYS)
+  set(MSYS 1)
+  set(UNIX 1)
+endif()
 
 set(CMAKE_CXX_COMPILER_ENV_VAR "CXX")
 
diff -Naur cmake-3.15.0-orig/Modules/CMakeDetermineCCompiler.cmake cmake-3.15.0/Modules/CMakeDetermineCCompiler.cmake
--- cmake-3.15.0-orig/Modules/CMakeDetermineCCompiler.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/CMakeDetermineCCompiler.cmake	2019-07-18 09:04:24.980092300 +0300
@@ -123,6 +123,8 @@
     set(CMAKE_COMPILER_IS_MINGW 1)
   elseif(CMAKE_C_PLATFORM_ID MATCHES "Cygwin")
     set(CMAKE_COMPILER_IS_CYGWIN 1)
+  elseif(CMAKE_C_PLATFORM_ID MATCHES "MSYS")
+    set(CMAKE_COMPILER_IS_MSYS 1)
   endif()
 endif()
 
diff -Naur cmake-3.15.0-orig/Modules/CMakeDetermineCXXCompiler.cmake cmake-3.15.0/Modules/CMakeDetermineCXXCompiler.cmake
--- cmake-3.15.0-orig/Modules/CMakeDetermineCXXCompiler.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/CMakeDetermineCXXCompiler.cmake	2019-07-18 09:04:24.995692400 +0300
@@ -118,6 +118,8 @@
     set(CMAKE_COMPILER_IS_MINGW 1)
   elseif(CMAKE_CXX_PLATFORM_ID MATCHES "Cygwin")
     set(CMAKE_COMPILER_IS_CYGWIN 1)
+  elseif(CMAKE_CXX_PLATFORM_ID MATCHES "MSYS")
+    set(CMAKE_COMPILER_IS_MSYS 1)
   endif()
 endif()
 
diff -Naur cmake-3.15.0-orig/Modules/CMakeDetermineFortranCompiler.cmake cmake-3.15.0/Modules/CMakeDetermineFortranCompiler.cmake
--- cmake-3.15.0-orig/Modules/CMakeDetermineFortranCompiler.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/CMakeDetermineFortranCompiler.cmake	2019-07-18 09:04:25.011292400 +0300
@@ -208,6 +208,9 @@
         if(CMAKE_COMPILER_OUTPUT MATCHES "THIS_IS_CYGWIN")
           set(CMAKE_Fortran_PLATFORM_ID "Cygwin")
         endif()
+        if("${CMAKE_COMPILER_OUTPUT}" MATCHES ".*THIS_IS_MSYS.*" )
+          set(CMAKE_Fortran_PLATFORM_ID "MSYS")
+        endif()
       endif()
     endif()
   endif()
@@ -224,6 +227,9 @@
       if(CMAKE_COMPILER_OUTPUT MATCHES "THIS_IS_CYGWIN")
         set(CMAKE_Fortran_PLATFORM_ID "Cygwin")
       endif()
+      if(CMAKE_COMPILER_OUTPUT MATCHES "THIS_IS_MSYS")
+        set(CMAKE_Fortran_PLATFORM_ID "MSYS")
+      endif()
     endif()
   endif()
 
@@ -235,6 +241,8 @@
     set(CMAKE_COMPILER_IS_MINGW 1)
   elseif(CMAKE_Fortran_PLATFORM_ID MATCHES "Cygwin")
     set(CMAKE_COMPILER_IS_CYGWIN 1)
+  elseif(CMAKE_Fortran_PLATFORM_ID MATCHES "MSYS")
+    set(CMAKE_COMPILER_IS_MSYS 1)
   endif()
 endif()
 
diff -Naur cmake-3.15.0-orig/Modules/CMakeDetermineSystem.cmake cmake-3.15.0/Modules/CMakeDetermineSystem.cmake
--- cmake-3.15.0-orig/Modules/CMakeDetermineSystem.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/CMakeDetermineSystem.cmake	2019-07-18 09:04:25.026892400 +0300
@@ -27,6 +27,7 @@
 # Tru64                         Tru64
 # Ultrix                        ULTRIX
 # cygwin                        CYGWIN_NT-5.1
+# MSYS                          MSYS_NT-6.1
 # MacOSX                        Darwin
 
 
@@ -43,7 +44,7 @@
     else()
       exec_program(${CMAKE_UNAME} ARGS -r OUTPUT_VARIABLE CMAKE_HOST_SYSTEM_VERSION)
     endif()
-    if(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux|CYGWIN.*|Darwin|^GNU$")
+    if(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux|CYGWIN.*|MSYS.*|Darwin|^GNU$")
       exec_program(${CMAKE_UNAME} ARGS -m OUTPUT_VARIABLE CMAKE_HOST_SYSTEM_PROCESSOR
         RETURN_VALUE val)
       if(CMAKE_HOST_SYSTEM_NAME STREQUAL "Darwin" AND
@@ -148,6 +149,11 @@
     set(${_PREFIX}_NAME CYGWIN)
   endif()
 
+  # fix for MSYS which has windows version in it
+  if(${_PREFIX}_NAME MATCHES MSYS)
+    set(${_PREFIX}_NAME MSYS)
+  endif()
+
   # set CMAKE_SYSTEM to the CMAKE_SYSTEM_NAME
   set(${_PREFIX}  ${${_PREFIX}_NAME})
   # if there is a CMAKE_SYSTEM_VERSION then add a -${CMAKE_SYSTEM_VERSION}
diff -Naur cmake-3.15.0-orig/Modules/CMakeFortranCompiler.cmake.in cmake-3.15.0/Modules/CMakeFortranCompiler.cmake.in
--- cmake-3.15.0-orig/Modules/CMakeFortranCompiler.cmake.in	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/CMakeFortranCompiler.cmake.in	2019-07-18 09:04:25.026892400 +0300
@@ -18,11 +18,17 @@
 set(CMAKE_Fortran_ABI_COMPILED @CMAKE_Fortran_ABI_COMPILED@)
 set(CMAKE_COMPILER_IS_MINGW @CMAKE_COMPILER_IS_MINGW@)
 set(CMAKE_COMPILER_IS_CYGWIN @CMAKE_COMPILER_IS_CYGWIN@)
+set(CMAKE_COMPILER_IS_MSYS @CMAKE_COMPILER_IS_MSYS@)
 if(CMAKE_COMPILER_IS_CYGWIN)
   set(CYGWIN 1)
   set(UNIX 1)
 endif()
 
+if(CMAKE_COMPILER_IS_MSYS)
+  set(MSYS 1)
+  set(UNIX 1)
+endif()
+
 set(CMAKE_Fortran_COMPILER_ENV_VAR "FC")
 
 set(CMAKE_Fortran_COMPILER_SUPPORTS_F90 @CMAKE_Fortran_COMPILER_SUPPORTS_F90@)
diff -Naur cmake-3.15.0-orig/Modules/CMakeFortranCompilerId.F.in cmake-3.15.0/Modules/CMakeFortranCompilerId.F.in
--- cmake-3.15.0-orig/Modules/CMakeFortranCompilerId.F.in	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/CMakeFortranCompilerId.F.in	2019-07-18 09:04:25.042492400 +0300
@@ -117,6 +117,8 @@
 #endif
 #if defined(__linux) || defined(__linux__) || defined(linux)
         PRINT *, 'INFO:platform[Linux]'
+#elif defined(__MSYS__)
+        PRINT *, 'INFO:platform[MSYS]'
 #elif defined(__CYGWIN__)
         PRINT *, 'INFO:platform[Cygwin]'
 #elif defined(__MINGW32__)
diff -Naur cmake-3.15.0-orig/Modules/CMakeJavaInformation.cmake cmake-3.15.0/Modules/CMakeJavaInformation.cmake
--- cmake-3.15.0-orig/Modules/CMakeJavaInformation.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/CMakeJavaInformation.cmake	2019-07-18 09:04:25.042492400 +0300
@@ -42,7 +42,7 @@
 
 # set java include flag option and the separator for multiple include paths
 set(CMAKE_INCLUDE_FLAG_Java "-classpath ")
-if(WIN32 AND NOT CYGWIN)
+if(WIN32 AND NOT CYGWIN AND NOT MSYS)
   set(CMAKE_INCLUDE_FLAG_SEP_Java ";")
 else()
   set(CMAKE_INCLUDE_FLAG_SEP_Java ":")
diff -Naur cmake-3.15.0-orig/Modules/CMakePlatformId.h.in cmake-3.15.0/Modules/CMakePlatformId.h.in
--- cmake-3.15.0-orig/Modules/CMakePlatformId.h.in	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/CMakePlatformId.h.in	2019-07-18 09:04:25.042492400 +0300
@@ -5,6 +5,9 @@
 #if defined(__linux) || defined(__linux__) || defined(linux)
 # define PLATFORM_ID "Linux"
 
+#elif defined(__MSYS__)
+# define PLATFORM_ID "MSYS"
+
 #elif defined(__CYGWIN__)
 # define PLATFORM_ID "Cygwin"
 
diff -Naur cmake-3.15.0-orig/Modules/CMakeSystemSpecificInformation.cmake cmake-3.15.0/Modules/CMakeSystemSpecificInformation.cmake
--- cmake-3.15.0-orig/Modules/CMakeSystemSpecificInformation.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/CMakeSystemSpecificInformation.cmake	2019-07-18 09:04:25.058092500 +0300
@@ -14,6 +14,7 @@
 set(APPLE  )
 set(UNIX   )
 set(CYGWIN )
+set(MSYS )
 set(WIN32  )
 
 
diff -Naur cmake-3.15.0-orig/Modules/CMakeTestGNU.c cmake-3.15.0/Modules/CMakeTestGNU.c
--- cmake-3.15.0-orig/Modules/CMakeTestGNU.c	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/CMakeTestGNU.c	2019-07-18 09:04:25.073692500 +0300
@@ -4,6 +4,8 @@
 #ifdef __MINGW32__
 void THIS_IS_MINGW();
 #endif
-#ifdef __CYGWIN__
+#if defined(__MSYS__)
+void THIS_IS_MSYS();
+#elif defined(__CYGWIN__)
 void THIS_IS_CYGWIN();
 #endif
diff -Naur cmake-3.15.0-orig/Modules/CPack.cmake cmake-3.15.0/Modules/CPack.cmake
--- cmake-3.15.0-orig/Modules/CPack.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/CPack.cmake	2019-07-18 09:04:25.073692500 +0300
@@ -542,6 +542,8 @@
   if(UNIX)
     if(CYGWIN)
       option(CPACK_BINARY_CYGWIN "Enable to build Cygwin binary packages" ON)
+    elseif(MSYS)
+      option(CPACK_BINARY_MSYS "Enable to build MSYS binary packages" ON)
     else()
       if(APPLE)
         option(CPACK_BINARY_BUNDLE       "Enable to build OSX bundles"      OFF)
@@ -573,6 +575,7 @@
   cpack_optional_append(CPACK_GENERATOR  CPACK_BINARY_7Z           7Z)
   cpack_optional_append(CPACK_GENERATOR  CPACK_BINARY_BUNDLE       Bundle)
   cpack_optional_append(CPACK_GENERATOR  CPACK_BINARY_CYGWIN       CygwinBinary)
+  cpack_optional_append(CPACK_GENERATOR  CPACK_BINARY_MSYS         MsysBinary)
   cpack_optional_append(CPACK_GENERATOR  CPACK_BINARY_DEB          DEB)
   cpack_optional_append(CPACK_GENERATOR  CPACK_BINARY_DRAGNDROP    DragNDrop)
   cpack_optional_append(CPACK_GENERATOR  CPACK_BINARY_FREEBSD      FREEBSD)
@@ -598,6 +601,8 @@
   if(UNIX)
     if(CYGWIN)
       option(CPACK_SOURCE_CYGWIN "Enable to build Cygwin source packages" ON)
+    elseif(MSYS)
+      option(CPACK_SOURCE_MSYS "Enable to build MSYS source packages" ON)
     else()
       option(CPACK_SOURCE_RPM  "Enable to build RPM source packages"  OFF)
       option(CPACK_SOURCE_TBZ2 "Enable to build TBZ2 source packages" ON)
@@ -626,6 +631,7 @@
   CPACK_BINARY_7Z
   CPACK_BINARY_BUNDLE
   CPACK_BINARY_CYGWIN
+  CPACK_BINARY_MSYS
   CPACK_BINARY_DEB
   CPACK_BINARY_DRAGNDROP
   CPACK_BINARY_FREEBSD
@@ -645,6 +651,7 @@
   CPACK_BINARY_ZIP
   CPACK_SOURCE_7Z
   CPACK_SOURCE_CYGWIN
+  CPACK_SOURCE_MSYS
   CPACK_SOURCE_RPM
   CPACK_SOURCE_TBZ2
   CPACK_SOURCE_TGZ
diff -Naur cmake-3.15.0-orig/Modules/CPackMsys.cmake cmake-3.15.0/Modules/CPackMsys.cmake
--- cmake-3.15.0-orig/Modules/CPackMsys.cmake	1970-01-01 03:00:00.000000000 +0300
+++ cmake-3.15.0/Modules/CPackMsys.cmake	2019-07-18 09:04:25.089292500 +0300
@@ -0,0 +1,33 @@
+##section Variables specific to CPack MSYS generator
+##end
+##module
+# - MSYS CPack generator (MSYS).
+# The following variable is specific to installers build on
+# and/or for MSYS:
+##end
+#
+##variable
+#   CPACK_MSYS_PATCH_NUMBER - The MSYS patch number.
+#   FIXME: This documentation is incomplete.
+##end
+##variable
+#   CPACK_MSYS_PATCH_FILE - The MSYS patch file.
+#   FIXME: This documentation is incomplete.
+##end
+##variable
+#   CPACK_MSYS_BUILD_SCRIPT - The MSYS build script.
+#   FIXME: This documentation is incomplete.
+##end
+
+#=============================================================================
+# Copyright 2006-2012 Kitware, Inc.
+#
+# Distributed under the OSI-approved BSD License (the "License");
+# see accompanying file Copyright.txt for details.
+#
+# This software is distributed WITHOUT ANY WARRANTY; without even the
+# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+# See the License for more information.
+#=============================================================================
+# (To distribute this file outside of CMake, substitute the full
+#  License text for the above reference.)
diff -Naur cmake-3.15.0-orig/Modules/ExternalProject.cmake cmake-3.15.0/Modules/ExternalProject.cmake
--- cmake-3.15.0-orig/Modules/ExternalProject.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/ExternalProject.cmake	2019-07-18 09:04:25.089292500 +0300
@@ -1901,7 +1901,7 @@
     string(REGEX REPLACE "^\\$\\(MAKE\\)" "\${make}" command "${command}")
     set(make "-Dmake=$(MAKE)")
 
-    if(WIN32 AND NOT CYGWIN)
+    if(WIN32 AND NOT CYGWIN AND NOT MSYS)
       set(code_cygpath_make "
 if(\${make} MATCHES \"^/\")
   execute_process(
diff -Naur cmake-3.15.0-orig/Modules/FindBoost.cmake cmake-3.15.0/Modules/FindBoost.cmake
--- cmake-3.15.0-orig/Modules/FindBoost.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/FindBoost.cmake	2019-07-18 09:04:25.120492600 +0300
@@ -1646,7 +1646,7 @@
 
 set(Boost_LIB_PREFIX "")
 if ( (GHSMULTI AND Boost_USE_STATIC_LIBS) OR
-    (WIN32 AND Boost_USE_STATIC_LIBS AND NOT CYGWIN) )
+    ( WIN32 AND Boost_USE_STATIC_LIBS AND NOT CYGWIN AND NOT MSYS) )
   set(Boost_LIB_PREFIX "lib")
 endif()
 
diff -Naur cmake-3.15.0-orig/Modules/FindCoin3D.cmake cmake-3.15.0/Modules/FindCoin3D.cmake
--- cmake-3.15.0-orig/Modules/FindCoin3D.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/FindCoin3D.cmake	2019-07-18 09:04:25.136092600 +0300
@@ -20,7 +20,7 @@
 #]=======================================================================]
 
 if (WIN32)
-  if (CYGWIN)
+  if (CYGWIN OR MSYS)
 
     find_path(COIN3D_INCLUDE_DIRS Inventor/So.h)
     find_library(COIN3D_LIBRARIES Coin)
diff -Naur cmake-3.15.0-orig/Modules/FindCurses.cmake cmake-3.15.0/Modules/FindCurses.cmake
--- cmake-3.15.0-orig/Modules/FindCurses.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/FindCurses.cmake	2019-07-18 09:04:25.136092600 +0300
@@ -68,7 +68,7 @@
 # cygwin ncurses stopped providing curses.h symlinks see above
 # message.  Cygwin is an ncurses package, so force ncurses on
 # cygwin if the curses.h is missing
-if(CYGWIN)
+if(CYGWIN OR MSYS)
   if (CURSES_NEED_WIDE)
     if(NOT EXISTS /usr/include/ncursesw/curses.h)
       set(CURSES_USE_NCURSES TRUE)
diff -Naur cmake-3.15.0-orig/Modules/FindFLTK.cmake cmake-3.15.0/Modules/FindFLTK.cmake
--- cmake-3.15.0-orig/Modules/FindFLTK.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/FindFLTK.cmake	2019-07-18 09:04:25.151692600 +0300
@@ -85,7 +85,7 @@
 
 #  Platform dependent libraries required by FLTK
 if(WIN32)
-  if(NOT CYGWIN)
+  if(NOT CYGWIN AND NOT MSYS)
     if(BORLAND)
       set( FLTK_PLATFORM_DEPENDENT_LIBS import32 )
     else()
diff -Naur cmake-3.15.0-orig/Modules/FindFLTK2.cmake cmake-3.15.0/Modules/FindFLTK2.cmake
--- cmake-3.15.0-orig/Modules/FindFLTK2.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/FindFLTK2.cmake	2019-07-18 09:04:25.167292700 +0300
@@ -30,7 +30,7 @@
 
 #  Platform dependent libraries required by FLTK2
 if(WIN32)
-  if(NOT CYGWIN)
+  if(NOT CYGWIN AND NOT MSYS)
     if(BORLAND)
       set( FLTK2_PLATFORM_DEPENDENT_LIBS import32 )
     else()
diff -Naur cmake-3.15.0-orig/Modules/FindGnuplot.cmake cmake-3.15.0/Modules/FindGnuplot.cmake
--- cmake-3.15.0-orig/Modules/FindGnuplot.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/FindGnuplot.cmake	2019-07-18 09:04:25.167292700 +0300
@@ -23,6 +23,7 @@
 #]=======================================================================]
 
 include(${CMAKE_CURRENT_LIST_DIR}/FindCygwin.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/FindMsys.cmake)
 
 find_program(GNUPLOT_EXECUTABLE
   NAMES
@@ -31,6 +32,7 @@
   wgnupl32
   PATHS
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
 )
 
 if (GNUPLOT_EXECUTABLE)
diff -Naur cmake-3.15.0-orig/Modules/FindMsys.cmake cmake-3.15.0/Modules/FindMsys.cmake
--- cmake-3.15.0-orig/Modules/FindMsys.cmake	1970-01-01 03:00:00.000000000 +0300
+++ cmake-3.15.0/Modules/FindMsys.cmake	2019-07-18 09:04:25.167292700 +0300
@@ -0,0 +1,28 @@
+# - this module looks for MSYS
+#
+
+#=============================================================================
+# Copyright 2001-2009 Kitware, Inc.
+#
+# Distributed under the OSI-approved BSD License (the "License");
+# see accompanying file Copyright.txt for details.
+#
+# This software is distributed WITHOUT ANY WARRANTY; without even the
+# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+# See the License for more information.
+#=============================================================================
+# (To distribute this file outside of CMake, substitute the full
+#  License text for the above reference.)
+
+if (WIN32)
+  find_path(MSYS_INSTALL_PATH
+    msys2_shell.cmd
+    "C:/MSYS"
+    "[HKEY_LOCAL_MACHINE\\SOFTWARE\\MSYS\\setup;rootdir]"
+    "[HKEY_LOCAL_MACHINE\\SOFTWARE\\Cygnus Solutions\\MSYS\\mounts v2\\/;native]"
+  )
+
+  mark_as_advanced(
+    MSYS_INSTALL_PATH
+  )
+endif ()
diff -Naur cmake-3.15.0-orig/Modules/FindOpenGL.cmake cmake-3.15.0/Modules/FindOpenGL.cmake
--- cmake-3.15.0-orig/Modules/FindOpenGL.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/FindOpenGL.cmake	2019-07-18 09:04:25.182892700 +0300
@@ -130,7 +130,7 @@
   set(OPENGL_USE_${_COMPONENT} 1)
 endforeach()
 
-if (CYGWIN)
+if (CYGWIN OR MSYS)
   find_path(OPENGL_INCLUDE_DIR GL/gl.h )
   list(APPEND _OpenGL_REQUIRED_VARS OPENGL_INCLUDE_DIR)
 
diff -Naur cmake-3.15.0-orig/Modules/FindOpenSSL.cmake cmake-3.15.0/Modules/FindOpenSSL.cmake
--- cmake-3.15.0-orig/Modules/FindOpenSSL.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/FindOpenSSL.cmake	2019-07-18 09:04:25.198492700 +0300
@@ -105,7 +105,7 @@
     include
 )
 
-if(WIN32 AND NOT CYGWIN)
+if(WIN32 AND NOT CYGWIN AND NOT MSYS)
   if(MSVC)
     # /MD and /MDd are the standard values - if someone wants to use
     # others, the libnames have to change here too
diff -Naur cmake-3.15.0-orig/Modules/FindPerl.cmake cmake-3.15.0/Modules/FindPerl.cmake
--- cmake-3.15.0-orig/Modules/FindPerl.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/FindPerl.cmake	2019-07-18 09:04:25.214092700 +0300
@@ -17,9 +17,11 @@
 #]=======================================================================]
 
 include(${CMAKE_CURRENT_LIST_DIR}/FindCygwin.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/FindMsys.cmake)
 
 set(PERL_POSSIBLE_BIN_PATHS
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
   )
 
 if(WIN32)
diff -Naur cmake-3.15.0-orig/Modules/FindPNG.cmake cmake-3.15.0/Modules/FindPNG.cmake
--- cmake-3.15.0-orig/Modules/FindPNG.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/FindPNG.cmake	2019-07-18 09:04:25.838093800 +0300
@@ -95,7 +95,7 @@
       set(PNG_INCLUDE_DIR ${PNG_INCLUDE_DIRS} ) # for backward compatibility
       set(PNG_LIBRARIES ${PNG_LIBRARY} ${ZLIB_LIBRARY})
 
-      if (CYGWIN)
+      if (CYGWIN OR MSYS)
         if(BUILD_SHARED_LIBS)
            # No need to define PNG_USE_DLL here, because it's default for Cygwin.
         else()
diff -Naur cmake-3.15.0-orig/Modules/FindPythonLibs.cmake cmake-3.15.0/Modules/FindPythonLibs.cmake
--- cmake-3.15.0-orig/Modules/FindPythonLibs.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/FindPythonLibs.cmake	2019-07-18 09:04:25.869293900 +0300
@@ -339,7 +339,7 @@
 
     if(PYTHON_MODULE_${_NAME}_BUILD_SHARED)
       set_target_properties(${_NAME} PROPERTIES PREFIX "${PYTHON_MODULE_PREFIX}")
-      if(WIN32 AND NOT CYGWIN)
+      if(WIN32 AND NOT CYGWIN AND NOT MSYS)
         set_target_properties(${_NAME} PROPERTIES SUFFIX ".pyd")
       endif()
     endif()
diff -Naur cmake-3.15.0-orig/Modules/FindQt3.cmake cmake-3.15.0/Modules/FindQt3.cmake
--- cmake-3.15.0-orig/Modules/FindQt3.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/FindQt3.cmake	2019-07-18 09:04:25.916094000 +0300
@@ -210,7 +210,7 @@
   set( QT_LIBRARIES ${QT_LIBRARIES} ${QT_QT_LIBRARY} )
   set( QT_DEFINITIONS "")
 
-  if (WIN32 AND NOT CYGWIN)
+  if (WIN32 AND NOT CYGWIN AND NOT MSYS)
     if (QT_QTMAIN_LIBRARY)
       # for version 3
       set (QT_DEFINITIONS -DQT_DLL -DQT_THREAD_SUPPORT -DNO_DEBUG)
diff -Naur cmake-3.15.0-orig/Modules/FindSelfPackers.cmake cmake-3.15.0/Modules/FindSelfPackers.cmake
--- cmake-3.15.0-orig/Modules/FindSelfPackers.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/FindSelfPackers.cmake	2019-07-18 09:04:25.947294000 +0300
@@ -17,15 +17,18 @@
 #]=======================================================================]
 
 include(${CMAKE_CURRENT_LIST_DIR}/FindCygwin.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/FindMsys.cmake)
 
 find_program(SELF_PACKER_FOR_EXECUTABLE
   upx
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
 )
 
 find_program(SELF_PACKER_FOR_SHARED_LIB
   upx
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
 )
 
 mark_as_advanced(
diff -Naur cmake-3.15.0-orig/Modules/FindTclsh.cmake cmake-3.15.0/Modules/FindTclsh.cmake
--- cmake-3.15.0-orig/Modules/FindTclsh.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/FindTclsh.cmake	2019-07-18 09:04:25.994094100 +0300
@@ -20,7 +20,7 @@
 to avoid finding the cygwin version on a Win32 build.
 #]=======================================================================]
 
-if(CYGWIN)
+if(CYGWIN OR MSYS)
   find_program(TCL_TCLSH NAMES cygtclsh83 cygtclsh80)
 endif()
 
diff -Naur cmake-3.15.0-orig/Modules/FindThreads.cmake cmake-3.15.0/Modules/FindThreads.cmake
--- cmake-3.15.0-orig/Modules/FindThreads.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/FindThreads.cmake	2019-07-18 09:04:26.025294200 +0300
@@ -207,7 +207,7 @@
     set(CMAKE_THREAD_LIBS_INIT )
   endif()
 
-  if(CMAKE_SYSTEM MATCHES "CYGWIN_NT")
+  if(CMAKE_SYSTEM MATCHES "CYGWIN_NT" OR CMAKE_SYSTEM MATCHES "MSYS_NT")
     set(CMAKE_USE_PTHREADS_INIT 1)
     set(Threads_FOUND TRUE)
     set(CMAKE_THREAD_LIBS_INIT )
diff -Naur cmake-3.15.0-orig/Modules/FindUnixCommands.cmake cmake-3.15.0/Modules/FindUnixCommands.cmake
--- cmake-3.15.0-orig/Modules/FindUnixCommands.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/FindUnixCommands.cmake	2019-07-18 09:04:26.056494200 +0300
@@ -13,10 +13,12 @@
 #]=======================================================================]
 
 include(${CMAKE_CURRENT_LIST_DIR}/FindCygwin.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/FindMsys.cmake)
 
 find_program(BASH
   bash
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
 )
 mark_as_advanced(
   BASH
@@ -25,6 +27,7 @@
 find_program(CP
   cp
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
 )
 mark_as_advanced(
   CP
@@ -33,6 +36,7 @@
 find_program(GZIP
   gzip
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
 )
 mark_as_advanced(
   GZIP
@@ -41,6 +45,7 @@
 find_program(MV
   mv
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
 )
 mark_as_advanced(
   MV
@@ -49,6 +54,7 @@
 find_program(RM
   rm
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
 )
 mark_as_advanced(
   RM
@@ -60,6 +66,7 @@
   gtar
   PATH
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
 )
 mark_as_advanced(
   TAR
diff -Naur cmake-3.15.0-orig/Modules/FindWget.cmake cmake-3.15.0/Modules/FindWget.cmake
--- cmake-3.15.0-orig/Modules/FindWget.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/FindWget.cmake	2019-07-18 09:04:26.118894300 +0300
@@ -16,10 +16,12 @@
 #]=======================================================================]
 
 include(${CMAKE_CURRENT_LIST_DIR}/FindCygwin.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/FindMsys.cmake)
 
 find_program(WGET_EXECUTABLE
   wget
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
 )
 
 include(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)
diff -Naur cmake-3.15.0-orig/Modules/GenerateExportHeader.cmake cmake-3.15.0/Modules/GenerateExportHeader.cmake
--- cmake-3.15.0-orig/Modules/GenerateExportHeader.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/GenerateExportHeader.cmake	2019-07-18 09:04:26.165694400 +0300
@@ -219,6 +219,7 @@
       AND NOT _INTEL_TOO_OLD
       AND NOT WIN32
       AND NOT CYGWIN
+      AND NOT MSYS
       AND NOT CMAKE_CXX_COMPILER_ID MATCHES XL
       AND NOT CMAKE_CXX_COMPILER_ID MATCHES PGI
       AND NOT CMAKE_CXX_COMPILER_ID MATCHES Watcom)
@@ -290,7 +291,7 @@
   get_property(type TARGET ${TARGET_LIBRARY} PROPERTY TYPE)
 
   if(NOT ${type} STREQUAL "STATIC_LIBRARY")
-    if(WIN32 OR CYGWIN)
+    if(WIN32 OR CYGWIN OR MSYS)
       set(DEFINE_EXPORT "__declspec(dllexport)")
       set(DEFINE_IMPORT "__declspec(dllimport)")
     elseif(COMPILER_HAS_HIDDEN_VISIBILITY)
diff -Naur cmake-3.15.0-orig/Modules/KDE3Macros.cmake cmake-3.15.0/Modules/KDE3Macros.cmake
--- cmake-3.15.0-orig/Modules/KDE3Macros.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/KDE3Macros.cmake	2019-07-18 09:31:50.465711000 +0300
@@ -311,7 +311,7 @@
   file(APPEND ${_laname} "# The name that we can dlopen(3).\n")
   file(APPEND ${_laname} "dlname='${_soname}'\n")
   file(APPEND ${_laname} "# Names of this library\n")
-  if(CYGWIN)
+  if(CYGWIN OR MSYS)
     file(APPEND ${_laname} "library_names='${_soname}'\n")
   else()
     file(APPEND ${_laname} "library_names='${_soname} ${_soname} ${_soname}'\n")
diff -Naur cmake-3.15.0-orig/Modules/Platform/MSYS.cmake cmake-3.15.0/Modules/Platform/MSYS.cmake
--- cmake-3.15.0-orig/Modules/Platform/MSYS.cmake	1970-01-01 03:00:00.000000000 +0300
+++ cmake-3.15.0/Modules/Platform/MSYS.cmake	2019-07-18 09:04:26.181294400 +0300
@@ -0,0 +1,75 @@
+if("${CMAKE_MINIMUM_REQUIRED_VERSION}" VERSION_LESS "2.8.3.20101214")
+  set(__USE_CMAKE_LEGACY_CYGWIN_WIN32 1)
+endif()
+if(NOT DEFINED WIN32)
+  set(WIN32 0)
+  if(DEFINED __USE_CMAKE_LEGACY_CYGWIN_WIN32)
+    if(NOT DEFINED CMAKE_LEGACY_CYGWIN_WIN32
+        AND DEFINED ENV{CMAKE_LEGACY_CYGWIN_WIN32})
+      set(CMAKE_LEGACY_CYGWIN_WIN32 $ENV{CMAKE_LEGACY_CYGWIN_WIN32})
+    endif()
+    if(CMAKE_LEGACY_CYGWIN_WIN32)
+      message(STATUS "Defining WIN32 under MSYS due to CMAKE_LEGACY_CYGWIN_WIN32")
+      set(WIN32 1)
+    elseif("x${CMAKE_LEGACY_CYGWIN_WIN32}" STREQUAL "x")
+      message(WARNING "CMake no longer defines WIN32 on MSYS!"
+        "\n"
+        "(1) If you are just trying to build this project, ignore this warning "
+        "or quiet it by setting CMAKE_LEGACY_CYGWIN_WIN32=0 in your environment or "
+        "in the CMake cache.  "
+        "If later configuration or build errors occur then this project may "
+        "have been written under the assumption that MSYS is WIN32.  "
+        "In that case, set CMAKE_LEGACY_CYGWIN_WIN32=1 instead."
+        "\n"
+        "(2) If you are developing this project, add the line\n"
+        "  set(CMAKE_LEGACY_CYGWIN_WIN32 0) # Remove when CMake >= 2.8.4 is required\n"
+        "at the top of your top-level CMakeLists.txt file or set the minimum "
+        "required version of CMake to 2.8.4 or higher.  "
+        "Then teach your project to build on Cygwin without WIN32.")
+    endif()
+  elseif(DEFINED CMAKE_LEGACY_CYGWIN_WIN32)
+    message(AUTHOR_WARNING "CMAKE_LEGACY_CYGWIN_WIN32 ignored because\n"
+      "  cmake_minimum_required(VERSION ${CMAKE_MINIMUM_REQUIRED_VERSION})\n"
+      "is at least 2.8.4.")
+  endif()
+endif()
+if(DEFINED __USE_CMAKE_LEGACY_CYGWIN_WIN32)
+  # Pass WIN32 legacy setting to scripts.
+  if(WIN32)
+    set(ENV{CMAKE_LEGACY_CYGWIN_WIN32} 1)
+  else()
+    set(ENV{CMAKE_LEGACY_CYGWIN_WIN32} 0)
+  endif()
+  unset(__USE_CMAKE_LEGACY_CYGWIN_WIN32)
+endif()
+
+set(MSYS 1)
+#set(CYGWIN 1)
+
+set(CMAKE_SHARED_LIBRARY_PREFIX "msys-")
+set(CMAKE_SHARED_LIBRARY_SUFFIX ".dll")
+set(CMAKE_SHARED_MODULE_PREFIX "msys-")
+set(CMAKE_SHARED_MODULE_SUFFIX ".dll")
+set(CMAKE_IMPORT_LIBRARY_PREFIX "lib")
+set(CMAKE_IMPORT_LIBRARY_SUFFIX ".dll.a")
+set(CMAKE_EXECUTABLE_SUFFIX ".exe")          # .exe
+# Modules have a different default prefix that shared libs.
+set(CMAKE_MODULE_EXISTS 1)
+
+set(CMAKE_FIND_LIBRARY_PREFIXES "lib")
+set(CMAKE_FIND_LIBRARY_SUFFIXES ".dll.a" ".a")
+
+# Shared libraries on MSYS can be named with their version number.
+set(CMAKE_SHARED_LIBRARY_NAME_WITH_VERSION 1)
+
+include(Platform/UnixPaths)
+
+# Windows API on Cygwin
+list(APPEND CMAKE_SYSTEM_INCLUDE_PATH
+  /usr/include/w32api
+  )
+
+# Windows API on Cygwin
+list(APPEND CMAKE_SYSTEM_LIBRARY_PATH
+  /usr/lib/w32api
+  )
diff -Naur cmake-3.15.0-orig/Modules/Platform/MSYS-Clang-C.cmake cmake-3.15.0/Modules/Platform/MSYS-Clang-C.cmake
--- cmake-3.15.0-orig/Modules/Platform/MSYS-Clang-C.cmake	1970-01-01 03:00:00.000000000 +0300
+++ cmake-3.15.0/Modules/Platform/MSYS-Clang-C.cmake	2019-07-18 09:04:26.196894500 +0300
@@ -0,0 +1 @@
+include(Platform/MSYS-GNU-C)
diff -Naur cmake-3.15.0-orig/Modules/Platform/MSYS-Clang-CXX.cmake cmake-3.15.0/Modules/Platform/MSYS-Clang-CXX.cmake
--- cmake-3.15.0-orig/Modules/Platform/MSYS-Clang-CXX.cmake	1970-01-01 03:00:00.000000000 +0300
+++ cmake-3.15.0/Modules/Platform/MSYS-Clang-CXX.cmake	2019-07-18 09:04:26.196894500 +0300
@@ -0,0 +1 @@
+include(Platform/MSYS-GNU-CXX)
diff -Naur cmake-3.15.0-orig/Modules/Platform/MSYS-Determine-CXX.cmake cmake-3.15.0/Modules/Platform/MSYS-Determine-CXX.cmake
--- cmake-3.15.0-orig/Modules/Platform/MSYS-Determine-CXX.cmake	1970-01-01 03:00:00.000000000 +0300
+++ cmake-3.15.0/Modules/Platform/MSYS-Determine-CXX.cmake	2019-07-18 09:04:26.212494500 +0300
@@ -0,0 +1,7 @@
+if(NOT CMAKE_CXX_COMPILER_NAMES)
+  set(CMAKE_CXX_COMPILER_NAMES c++)
+endif()
+
+# Exclude C++ compilers differing from C compiler only by case
+# because this platform may have a case-insensitive filesystem.
+set(CMAKE_CXX_COMPILER_EXCLUDE CC aCC xlC)
diff -Naur cmake-3.15.0-orig/Modules/Platform/MSYS-GNU.cmake cmake-3.15.0/Modules/Platform/MSYS-GNU.cmake
--- cmake-3.15.0-orig/Modules/Platform/MSYS-GNU.cmake	1970-01-01 03:00:00.000000000 +0300
+++ cmake-3.15.0/Modules/Platform/MSYS-GNU.cmake	2019-07-18 09:33:17.311063600 +0300
@@ -0,0 +1,54 @@
+# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
+# file Copyright.txt or https://cmake.org/licensing for details.
+
+
+# This module is shared by multiple languages; use include blocker.
+if(__MSYS_COMPILER_GNU)
+  return()
+endif()
+set(__MSYS_COMPILER_GNU 1)
+
+# TODO: Is -Wl,--enable-auto-import now always default?
+string(APPEND CMAKE_EXE_LINKER_FLAGS_INIT " -Wl,--enable-auto-import")
+set(CMAKE_CREATE_WIN32_EXE  "-mwindows")
+
+set(CMAKE_GNULD_IMAGE_VERSION
+  "-Wl,--major-image-version,<TARGET_VERSION_MAJOR>,--minor-image-version,<TARGET_VERSION_MINOR>")
+set(CMAKE_GENERATOR_RC windres)
+macro(__msys_compiler_gnu lang)
+  # Binary link rules.
+  set(CMAKE_${lang}_CREATE_SHARED_MODULE
+    "<CMAKE_${lang}_COMPILER> <LANGUAGE_COMPILE_FLAGS> <CMAKE_SHARED_MODULE_${lang}_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_MODULE_CREATE_${lang}_FLAGS> -o <TARGET> ${CMAKE_GNULD_IMAGE_VERSION} <OBJECTS> <LINK_LIBRARIES>")
+  set(CMAKE_${lang}_CREATE_SHARED_LIBRARY
+    "<CMAKE_${lang}_COMPILER> <LANGUAGE_COMPILE_FLAGS> <CMAKE_SHARED_LIBRARY_${lang}_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_${lang}_FLAGS> -o <TARGET> -Wl,--out-implib,<TARGET_IMPLIB> ${CMAKE_GNULD_IMAGE_VERSION} <OBJECTS> <LINK_LIBRARIES>")
+  set(CMAKE_${lang}_LINK_EXECUTABLE
+    "<CMAKE_${lang}_COMPILER> <FLAGS> <CMAKE_${lang}_LINK_FLAGS> <LINK_FLAGS> <OBJECTS>  -o <TARGET> -Wl,--out-implib,<TARGET_IMPLIB> ${CMAKE_GNULD_IMAGE_VERSION} <LINK_LIBRARIES>")
+
+   # No -fPIC on MSYS
+  set(CMAKE_${lang}_COMPILE_OPTIONS_PIC "")
+  set(CMAKE_${lang}_COMPILE_OPTIONS_PIE "")
+  set(_CMAKE_${lang}_PIE_MAY_BE_SUPPORTED_BY_LINKER NO)
+  set(CMAKE_${lang}_LINK_OPTIONS_PIE "")
+  set(CMAKE_${lang}_LINK_OPTIONS_NO_PIE "")
+  set(CMAKE_SHARED_LIBRARY_${lang}_FLAGS "")
+
+  # Initialize C link type selection flags.  These flags are used when
+  # building a shared library, shared module, or executable that links
+  # to other libraries to select whether to use the static or shared
+  # versions of the libraries.
+  foreach(type SHARED_LIBRARY SHARED_MODULE EXE)
+    set(CMAKE_${type}_LINK_STATIC_${lang}_FLAGS "-Wl,-Bstatic")
+    set(CMAKE_${type}_LINK_DYNAMIC_${lang}_FLAGS "-Wl,-Bdynamic")
+  endforeach()
+
+  set(CMAKE_EXE_EXPORTS_${lang}_FLAG "-Wl,--export-all-symbols")
+  # TODO: Is -Wl,--enable-auto-import now always default?
+  string(APPEND CMAKE_SHARED_LIBRARY_CREATE_${lang}_FLAGS " -Wl,--enable-auto-import")
+  set(CMAKE_SHARED_MODULE_CREATE_${lang}_FLAGS "${CMAKE_SHARED_LIBRARY_CREATE_${lang}_FLAGS}")
+
+  if(NOT CMAKE_RC_COMPILER_INIT)
+    set(CMAKE_RC_COMPILER_INIT windres)
+  endif()
+
+  enable_language(RC)
+endmacro()
diff -Naur cmake-3.15.0-orig/Modules/Platform/MSYS-GNU-C.cmake cmake-3.15.0/Modules/Platform/MSYS-GNU-C.cmake
--- cmake-3.15.0-orig/Modules/Platform/MSYS-GNU-C.cmake	1970-01-01 03:00:00.000000000 +0300
+++ cmake-3.15.0/Modules/Platform/MSYS-GNU-C.cmake	2019-07-18 09:04:26.212494500 +0300
@@ -0,0 +1,2 @@
+include(Platform/MSYS-GNU)
+__msys_compiler_gnu(C)
diff -Naur cmake-3.15.0-orig/Modules/Platform/MSYS-GNU-CXX.cmake cmake-3.15.0/Modules/Platform/MSYS-GNU-CXX.cmake
--- cmake-3.15.0-orig/Modules/Platform/MSYS-GNU-CXX.cmake	1970-01-01 03:00:00.000000000 +0300
+++ cmake-3.15.0/Modules/Platform/MSYS-GNU-CXX.cmake	2019-07-18 09:04:26.212494500 +0300
@@ -0,0 +1,2 @@
+include(Platform/MSYS-GNU)
+__msys_compiler_gnu(CXX)
diff -Naur cmake-3.15.0-orig/Modules/Platform/MSYS-GNU-Fortran.cmake cmake-3.15.0/Modules/Platform/MSYS-GNU-Fortran.cmake
--- cmake-3.15.0-orig/Modules/Platform/MSYS-GNU-Fortran.cmake	1970-01-01 03:00:00.000000000 +0300
+++ cmake-3.15.0/Modules/Platform/MSYS-GNU-Fortran.cmake	2019-07-18 09:04:26.212494500 +0300
@@ -0,0 +1,2 @@
+include(Platform/MSYS-GNU)
+__msys_compiler_gnu(Fortran)
diff -Naur cmake-3.15.0-orig/Modules/Platform/MSYS-windres.cmake cmake-3.15.0/Modules/Platform/MSYS-windres.cmake
--- cmake-3.15.0-orig/Modules/Platform/MSYS-windres.cmake	1970-01-01 03:00:00.000000000 +0300
+++ cmake-3.15.0/Modules/Platform/MSYS-windres.cmake	2019-07-18 09:04:26.228094500 +0300
@@ -0,0 +1 @@
+set(CMAKE_RC_COMPILE_OBJECT "<CMAKE_RC_COMPILER> -O coff <DEFINES> <INCLUDES> <FLAGS> <SOURCE> <OBJECT>")
diff -Naur cmake-3.15.0-orig/Modules/UseJava.cmake cmake-3.15.0/Modules/UseJava.cmake
--- cmake-3.15.0-orig/Modules/UseJava.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/UseJava.cmake	2019-07-18 09:04:26.228094500 +0300
@@ -497,7 +497,7 @@
         ${CMAKE_JAVA_LIBRARY_OUTPUT_PATH}
     )
 
-    if (CMAKE_HOST_WIN32 AND NOT CYGWIN AND CMAKE_HOST_SYSTEM_NAME MATCHES "Windows")
+    if (CMAKE_HOST_WIN32 AND NOT CYGWIN AND NOT MSYS AND CMAKE_HOST_SYSTEM_NAME MATCHES "Windows")
         set(CMAKE_JAVA_INCLUDE_FLAG_SEP ";")
     else ()
         set(CMAKE_JAVA_INCLUDE_FLAG_SEP ":")
@@ -1274,7 +1274,7 @@
     endif()
 
     set (_output_files)
-    if (WIN32 AND NOT CYGWIN AND CMAKE_HOST_SYSTEM_NAME MATCHES "Windows")
+    if (WIN32 AND NOT CYGWIN AND NOT MSYS AND CMAKE_HOST_SYSTEM_NAME MATCHES "Windows")
       set(_classpath_sep "$<SEMICOLON>")
     else ()
       set(_classpath_sep ":")
diff -Naur cmake-3.15.0-orig/Modules/UseSWIG.cmake cmake-3.15.0/Modules/UseSWIG.cmake
--- cmake-3.15.0-orig/Modules/UseSWIG.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Modules/UseSWIG.cmake	2019-07-18 09:04:26.243694500 +0300
@@ -741,7 +741,7 @@
     if (APPLE)
       set_target_properties (${target_name} PROPERTIES SUFFIX ".jnilib")
     endif()
-    if ((WIN32 AND MINGW) OR CYGWIN OR CMAKE_SYSTEM_NAME STREQUAL MSYS)
+    if ((WIN32 AND MINGW) OR CYGWIN OR MSYS OR CMAKE_SYSTEM_NAME STREQUAL MSYS)
       set_target_properties(${target_name} PROPERTIES PREFIX "")
     endif()
   elseif (swig_lowercase_language STREQUAL "lua")
@@ -765,7 +765,7 @@
     # Windows: .dll is no longer supported as a filename extension for extension modules.
     # .pyd is now the only filename extension that will be searched for.
     # </quote>
-    if(WIN32 AND NOT CYGWIN)
+    if(WIN32 AND NOT CYGWIN AND NOT MSYS)
       set_target_properties(${target_name} PROPERTIES SUFFIX ".pyd")
     endif()
   elseif (swig_lowercase_language STREQUAL "r")
diff -Naur cmake-3.15.0-orig/Source/CMakeInstallDestinations.cmake cmake-3.15.0/Source/CMakeInstallDestinations.cmake
--- cmake-3.15.0-orig/Source/CMakeInstallDestinations.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Source/CMakeInstallDestinations.cmake	2019-07-18 09:04:26.259294600 +0300
@@ -6,7 +6,7 @@
   set(CMAKE_INFO_DIR_DEFAULT "documentation/info") # HAIKU
   set(CMAKE_MAN_DIR_DEFAULT "documentation/man") # HAIKU
   set(CMAKE_XDGDATA_DIR_DEFAULT "share") # HAIKU
-elseif(CYGWIN)
+elseif(CYGWIN OR MSYS)
   set(CMAKE_BIN_DIR_DEFAULT "bin") # CYGWIN
   set(CMAKE_DATA_DIR_DEFAULT "share/cmake-${CMake_VERSION}") # CYGWIN
   set(CMAKE_DOC_DIR_DEFAULT "share/doc/cmake-${CMake_VERSION}") # CYGWIN
diff -Naur cmake-3.15.0-orig/Source/CMakeLists.txt cmake-3.15.0/Source/CMakeLists.txt
--- cmake-3.15.0-orig/Source/CMakeLists.txt	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Source/CMakeLists.txt	2019-07-18 09:04:26.259294600 +0300
@@ -795,7 +795,7 @@
 # Temporary variable for tools targets
 set(_tools)
 
-if(WIN32 AND NOT CYGWIN)
+if(WIN32 AND NOT CYGWIN AND NOT MSYS)
   set_source_files_properties(cmcldeps.cxx PROPERTIES COMPILE_DEFINITIONS _WIN32_WINNT=0x0501)
   add_executable(cmcldeps cmcldeps.cxx ${MANIFEST_FILE})
   list(APPEND _tools cmcldeps)
@@ -970,7 +970,7 @@
   CPack/IFW/cmCPackIFWRepository.h
   )
 
-if(CYGWIN)
+if(CYGWIN OR MSYS)
   set(CPACK_SRCS ${CPACK_SRCS}
     CPack/cmCPackCygwinBinaryGenerator.cxx
     CPack/cmCPackCygwinSourceGenerator.cxx
@@ -1012,10 +1012,10 @@
   endif()
 endif()
 
-if(CYGWIN)
+if(CYGWIN OR MSYS)
   find_package(LibUUID)
 endif()
-if(WIN32 OR (CYGWIN AND LibUUID_FOUND))
+if(WIN32 OR ((CYGWIN OR MSYS) AND LibUUID_FOUND))
   set(CPACK_SRCS ${CPACK_SRCS}
     CPack/WiX/cmCMakeToWixPath.cxx
     CPack/WiX/cmCMakeToWixPath.h
@@ -1072,7 +1072,7 @@
       "See CMakeFiles/CMakeError.log for details of the failure.")
   endif()
 endif()
-if(CYGWIN AND LibUUID_FOUND)
+if((CYGWIN OR MSYS) AND LibUUID_FOUND)
   target_link_libraries(CPackLib ${LibUUID_LIBRARIES})
   include_directories(CPackLib ${LibUUID_INCLUDE_DIRS})
   set_property(SOURCE CPack/cmCPackGeneratorFactory.cxx PROPERTY COMPILE_DEFINITIONS HAVE_LIBUUID)
diff -Naur cmake-3.15.0-orig/Source/cmExtraEclipseCDT4Generator.cxx cmake-3.15.0/Source/cmExtraEclipseCDT4Generator.cxx
--- cmake-3.15.0-orig/Source/cmExtraEclipseCDT4Generator.cxx	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Source/cmExtraEclipseCDT4Generator.cxx	2019-07-18 09:37:53.057147900 +0300
@@ -635,7 +635,7 @@
     xml.EndElement(); // extension
   } else {
     std::string systemName = mf->GetSafeDefinition("CMAKE_SYSTEM_NAME");
-    if (systemName == "CYGWIN") {
+    if (systemName == "CYGWIN" || systemName == "MSYS") {
       xml.StartElement("extension");
       xml.Attribute("id", "org.eclipse.cdt.core.Cygwin_PE");
       xml.Attribute("point", "org.eclipse.cdt.core.BinaryParser");
diff -Naur cmake-3.15.0-orig/Source/cmLocalGenerator.cxx cmake-3.15.0/Source/cmLocalGenerator.cxx
--- cmake-3.15.0-orig/Source/cmLocalGenerator.cxx	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Source/cmLocalGenerator.cxx	2019-07-18 09:31:19.437256500 +0300
@@ -1181,6 +1181,7 @@
         }
         if (this->Makefile->IsOn("WIN32") &&
             !(this->Makefile->IsOn("CYGWIN") ||
+              this->Makefile->IsOn("MSYS") ||
               this->Makefile->IsOn("MINGW"))) {
           std::vector<cmSourceFile*> sources;
           target->GetSourceFiles(sources, buildType);
diff -Naur cmake-3.15.0-orig/Source/kwsys/CMakeLists.txt cmake-3.15.0/Source/kwsys/CMakeLists.txt
--- cmake-3.15.0-orig/Source/kwsys/CMakeLists.txt	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Source/kwsys/CMakeLists.txt	2019-07-18 09:04:26.274894600 +0300
@@ -526,7 +526,7 @@
 IF(KWSYS_USE_SystemInformation)
   SET_PROPERTY(SOURCE SystemInformation.cxx APPEND PROPERTY
     COMPILE_DEFINITIONS SIZEOF_VOID_P=${CMAKE_SIZEOF_VOID_P})
-  IF(NOT CYGWIN)
+  IF(NOT CYGWIN AND NOT MSYS)
     INCLUDE(CheckIncludeFiles)
     CHECK_INCLUDE_FILES("sys/types.h;ifaddrs.h" KWSYS_SYS_HAS_IFADDRS_H)
     IF(KWSYS_SYS_HAS_IFADDRS_H)
@@ -685,7 +685,7 @@
       COMPILE_DEFINITIONS KWSYS_BUILD_SHARED=1)
   ENDIF()
 
-  IF(UNIX AND NOT CYGWIN)
+  IF(UNIX AND NOT (CYGWIN OR MSYS))
     KWSYS_PLATFORM_CXX_TEST(KWSYS_CXX_HAS_GETLOADAVG
       "Checking whether CXX compiler has getloadavg" DIRECT)
     IF(KWSYS_CXX_HAS_GETLOADAVG)
@@ -1198,7 +1198,7 @@
     ADD_EXECUTABLE(${KWSYS_NAMESPACE}TestProcess testProcess.c)
     SET_PROPERTY(TARGET ${KWSYS_NAMESPACE}TestProcess PROPERTY LABELS ${KWSYS_LABELS_EXE})
     TARGET_LINK_LIBRARIES(${KWSYS_NAMESPACE}TestProcess ${KWSYS_TARGET_C_LINK})
-    IF(NOT CYGWIN)
+    IF(NOT CYGWIN AND NOT MSYS)
       SET(KWSYS_TEST_PROCESS_7 7)
     ENDIF()
     FOREACH(n 1 2 3 4 5 6 ${KWSYS_TEST_PROCESS_7} 9 10)
diff -Naur cmake-3.15.0-orig/Source/Modules/FindLibUUID.cmake cmake-3.15.0/Source/Modules/FindLibUUID.cmake
--- cmake-3.15.0-orig/Source/Modules/FindLibUUID.cmake	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Source/Modules/FindLibUUID.cmake	2019-07-18 09:04:26.290494600 +0300
@@ -50,6 +50,16 @@
     NAMES cyguuid-1.dll
     )
   set(CMAKE_FIND_LIBRARY_SUFFIXES ${old_suffixes})
+elseif(MSYS)
+  # Note: on current version of MSYS2, linking to libuuid.dll.a doesn't
+  #       import the right symbols sometimes. Fix this by linking directly
+  #       to the DLL that provides the symbols, instead.
+  set(old_suffixes ${CMAKE_FIND_LIBRARY_SUFFIXES})
+  set(CMAKE_FIND_LIBRARY_SUFFIXES .dll)
+  find_library(LibUUID_LIBRARY
+    NAMES msys-uuid-1.dll
+    )
+  set(CMAKE_FIND_LIBRARY_SUFFIXES ${old_suffixes})
 else()
   find_library(LibUUID_LIBRARY
     NAMES uuid
diff -Naur cmake-3.15.0-orig/Tests/CMakeLists.txt cmake-3.15.0/Tests/CMakeLists.txt
--- cmake-3.15.0-orig/Tests/CMakeLists.txt	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Tests/CMakeLists.txt	2019-07-18 09:42:36.244445300 +0300
@@ -105,7 +105,7 @@
   # assume no resources building to test
   set(CMake_TEST_RESOURCES FALSE)
   # for windows and cygwin assume we have resources
-  if(WIN32 OR CYGWIN)
+  if(WIN32 OR CYGWIN OR MSYS)
     set(CMake_TEST_RESOURCES TRUE)
   endif()
   # for borland and watcom there is no resource support
@@ -250,7 +250,7 @@
   endif()
 
   if(do_cvs_tests AND NOT UNIX)
-    if("${CVS_EXECUTABLE}" MATCHES "cygwin")
+    if("${CVS_EXECUTABLE}" MATCHES "cygwin" OR "${CVS_EXECUTABLE}" MATCHES "MSYS")
       set(do_cvs_tests 0)
     endif()
   endif()
@@ -1935,7 +1935,7 @@
 
   # Test static linking on toolchains known to support it.
   if(CMAKE_C_COMPILER_ID STREQUAL "GNU"
-      AND NOT APPLE AND NOT WIN32 AND NOT CYGWIN
+      AND NOT APPLE AND NOT WIN32 AND NOT CYGWIN AND NOT MSYS
       AND EXISTS "/usr/lib/libm.a")
     add_test(LinkStatic  ${CMAKE_CTEST_COMMAND}
       --build-and-test
@@ -2669,7 +2669,7 @@
     mark_as_advanced(BZR_EXECUTABLE)
     set(CTEST_TEST_UPDATE_BZR 0)
     if(BZR_EXECUTABLE)
-      if(NOT "${BZR_EXECUTABLE}" MATCHES "cygwin" OR UNIX)
+      if(NOT "${BZR_EXECUTABLE}" MATCHES "cygwin" OR "${BZR_EXECUTABLE}" MATCHES "MSYS" OR UNIX)
         set(CTEST_TEST_UPDATE_BZR 1)
       endif()
     endif()
@@ -2701,7 +2701,7 @@
     mark_as_advanced(GIT_EXECUTABLE)
     set(CTEST_TEST_UPDATE_GIT 0)
     if(GIT_EXECUTABLE)
-      if(NOT "${GIT_EXECUTABLE}" MATCHES "cygwin" OR UNIX)
+      if(NOT "${GIT_EXECUTABLE}" MATCHES "cygwin" OR "${GIT_EXECUTABLE}" MATCHES "MSYS" OR UNIX)
         set(CTEST_TEST_UPDATE_GIT 1)
       endif()
     endif()
@@ -2720,7 +2720,7 @@
     mark_as_advanced(HG_EXECUTABLE)
     set(CTEST_TEST_UPDATE_HG 0)
     if(HG_EXECUTABLE)
-      if(NOT "${HG_EXECUTABLE}" MATCHES "cygwin" OR UNIX)
+      if(NOT "${HG_EXECUTABLE}" MATCHES "cygwin" OR "${HG_EXECUTABLE}" MATCHES "MSYS" OR UNIX)
         set(CTEST_TEST_UPDATE_HG 1)
       endif()
     endif()
@@ -2740,7 +2740,7 @@
     mark_as_advanced(P4_EXECUTABLE P4D_EXECUTABLE)
     set(CTEST_TEST_UPDATE_P4 0)
     if(P4_EXECUTABLE AND P4D_EXECUTABLE)
-      if(NOT "${P4_EXECUTABLE};${P4D_EXECUTABLE}" MATCHES "cygwin" OR UNIX)
+      if(NOT "${P4_EXECUTABLE};${P4D_EXECUTABLE}" MATCHES "cygwin" OR "${P4_EXECUTABLE}" MATCHES "MSYS" OR UNIX)
         set(CTEST_TEST_UPDATE_P4 1)
       endif()
     endif()
@@ -3037,7 +3037,7 @@
   set(CTestTestBadExe_REGEX "BAD_COMMAND")
   # some cygwin can not be made to produce a BAD_COMMAND error
   # the best we can get from it is a failed test
-  if(CYGWIN)
+  if(CYGWIN OR MSYS)
     set(CTestTestBadExe_REGEX "(\\*\\*\\*Failed)|BAD_COMMAND")
   endif()
   set_tests_properties(CTestTestBadExe PROPERTIES
diff -Naur cmake-3.15.0-orig/Tests/CMakeOnly/CheckCXXCompilerFlag/CMakeLists.txt cmake-3.15.0/Tests/CMakeOnly/CheckCXXCompilerFlag/CMakeLists.txt
--- cmake-3.15.0-orig/Tests/CMakeOnly/CheckCXXCompilerFlag/CMakeLists.txt	2019-07-17 15:07:17.000000000 +0300
+++ cmake-3.15.0/Tests/CMakeOnly/CheckCXXCompilerFlag/CMakeLists.txt	2019-07-18 09:04:26.306094700 +0300
@@ -36,7 +36,7 @@
   string (REGEX REPLACE ".*Version ([0-9]+(\\.[0-9]+)+).*" "\\1" _intel_version "${_intel_version_info}")
 endif()
 
-message("Platform:\n  WIN32: ${WIN32}\n  UNIX: ${UNIX}\n  APPLE: ${APPLE}\n  MINGW: ${MINGW}\n  CYGWIN: ${CYGWIN}\n"
+message("Platform:\n  WIN32: ${WIN32}\n  UNIX: ${UNIX}\n  APPLE: ${APPLE}\n  MINGW: ${MINGW}\n  CYGWIN: ${CYGWIN}\n  MSYS: ${MSYS}\n"
   "  MSVC: ${MSVC}\n  MSVC60: ${MSVC60}\n  MSVC70: ${MSVC70}\n  MSVC71: ${MSVC71}\n  MSVC80: ${MSVC80}\n  MSVC90: ${MSVC90}\n  MSVC10: ${MSVC10}\n"
   "  GCC: ${_gcc_version}\n"
   "  Clang: ${_clang_version}\n"
diff -Naur cmake-3.15.0-orig/Tests/CMakeTests/ImplicitLinkInfoTest.cmake.in cmake-3.15.0/Tests/CMakeTests/ImplicitLinkInfoTest.cmake.in
--- cmake-3.15.0-orig/Tests/CMakeTests/ImplicitLinkInfoTest.cmake.in	2019-07-17 15:07:18.000000000 +0300
+++ cmake-3.15.0/Tests/CMakeTests/ImplicitLinkInfoTest.cmake.in	2019-07-18 09:04:26.321694700 +0300
@@ -441,21 +441,23 @@
 # MSYS
 
 # gcc dummy.c -v
-set(msys_gcc_text " C:/some-mingw/bin/../libexec/gcc/mingw32/3.4.5/collect2.exe -Bdynamic /some-mingw/lib/crt2.o C:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/crtbegin.o -LC:/some-mingw/bin/../lib/gcc/mingw32/3.4.5 -LC:/some-mingw/bin/../lib/gcc -L/some-mingw/lib -LC:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/../../.. C:/home/user/AppData/Local/Temp/cckQmvRt.o -lmingw32 -lgcc -lmoldname -lmingwex -lmsvcrt -luser32 -lkernel32 -ladvapi32 -lshell32 -lmingw32 -lgcc -lmoldname -lmingwex -lmsvcrt C:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/crtend.o")
-set(msys_gcc_libs "mingw32;gcc;moldname;mingwex;user32;kernel32;advapi32;shell32;mingw32;gcc;moldname;mingwex")
-set(msys_gcc_dirs "C:/some-mingw/lib/gcc/mingw32/3.4.5;C:/some-mingw/lib/gcc;/some-mingw/lib;C:/some-mingw/lib")
+set(msys_gcc_text " /usr/lib/gcc/i686-pc-msys/6.4.0/collect2.exe -Bdynamic --dll-search-prefix=msys- /usr/lib/gcc/i686-pc-msys/6.4.0/../../../crt0.o -L/usr/lib/gcc/i686-pc-msys/6.4.0 -L/usr/lib/gcc/i686-pc-msys/6.4.0 -L/usr/lib/gcc/i686-pc-msys/6.4.0/../../.. /home/user/AppData/Local/Temp/cczg1Arh.o -lgcc -lmsys-2.0 -luser32 -lkernel32 -ladvapi32 -lshell32 -lgcc")
+set(msys_gcc_libs "msys-2.0;user32;kernel32;advapi32;shell32")
+set(msys_gcc_dirs "/usr/lib/gcc/i686-pc-msys/6.4.0;/usr/lib")
 list(APPEND platforms msys_gcc)
 
 # g++ dummy.cxx -v
-set(msys_g++_text " C:/some-mingw/bin/../libexec/gcc/mingw32/3.4.5/collect2.exe -Bdynamic /some-mingw/lib/crt2.o C:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/crtbegin.o -LC:/some-mingw/bin/../lib/gcc/mingw32/3.4.5 -LC:/some-mingw/bin/../lib/gcc -L/some-mingw/lib -LC:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/../../.. C:/home/user/AppData/Local/Temp/cci5hYPk.o -lstdc++ -lmingw32 -lgcc -lmoldname -lmingwex -lmsvcrt -luser32 -lkernel32 -ladvapi32 -lshell32 -lmingw32 -lgcc -lmoldname -lmingwex -lmsvcrt C:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/crtend.o")
-set(msys_g++_libs "stdc++;mingw32;gcc;moldname;mingwex;user32;kernel32;advapi32;shell32;mingw32;gcc;moldname;mingwex")
-set(msys_g++_dirs "C:/some-mingw/lib/gcc/mingw32/3.4.5;C:/some-mingw/lib/gcc;/some-mingw/lib;C:/some-mingw/lib")
+set(msys_g++_text " /usr/lib/gcc/i686-pc-msys/6.4.0/collect2.exe -Bdynamic --dll-search-prefix=msys- /usr/lib/gcc/i686-pc-msys/6.4.0/../../../crt0.o -L/usr/lib/gcc/i686-pc-msys/6.4.0 -L/usr/lib/gcc/i686-pc-msys/6.4.0 -L/usr/lib/gcc/i686-pc-msys/6.4.0/../../.. /home/user/AppData/Local/Temp/ccsvcDO6.o -lstdc++ -lgcc -lmsys-2.0 -luser32 -lkernel32 -ladvapi32 -lshell32 -lgcc")
+set(msys_g++_libs "stdc++;msys-2.0;user32;kernel32;advapi32;shell32")
+set(msys_g++_dirs "/usr/lib/gcc/i686-pc-msys/6.4.0;/usr/lib")
 list(APPEND platforms msys_g++)
 
 # g77 dummy.f -v
-set(msys_g77_text " C:/some-mingw/bin/../libexec/gcc/mingw32/3.4.5/collect2.exe -Bdynamic /some-mingw/lib/crt2.o C:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/crtbegin.o -LC:/some-mingw/bin/../lib/gcc/mingw32/3.4.5 -LC:/some-mingw/bin/../lib/gcc -L/some-mingw/lib -LC:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/../../.. C:/home/user/AppData/Local/Temp/ccabRxQ1.o -lfrtbegin -lg2c -lmingw32 -lgcc -lmoldname -lmingwex -lmsvcrt -luser32 -lkernel32 -ladvapi32 -lshell32 -lmingw32 -lgcc -lmoldname -lmingwex -lmsvcrt C:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/crtend.o")
-set(msys_g77_libs "frtbegin;g2c;mingw32;gcc;moldname;mingwex;user32;kernel32;advapi32;shell32;mingw32;gcc;moldname;mingwex")
-set(msys_g77_dirs "C:/some-mingw/lib/gcc/mingw32/3.4.5;C:/some-mingw/lib/gcc;/some-mingw/lib;C:/some-mingw/lib")
+set(msys_g77_text "Configured with: ... LD=/opt/gcc-tools/bin/ld.exe
+ /usr/lib/gcc/i686-pc-msys/6.4.0/collect2.exe -Bdynamic --dll-search-prefix=msys- -u ___register_frame_info -u ___deregister_frame_info /usr/lib/gcc/i686-pc-msys/6.4.0/../../../crt0.o /usr/lib/gcc/i686-pc-msys/6.4.0/crtbegin.o -L/usr/lib/gcc/i686-pc-msys/6.4.0 -L/usr/lib/gcc/i686-pc-msys/6.4.0 -L/usr/lib/gcc/i686-pc-msys/6.4.0/../../.. /home/user/AppData/Local/Temp/ccqRWKWg.o -lgfortranbegin -lgfortran -lgcc_s -lgcc_s -lgcc -lmsys-2.0 -luser32 -lkernel32 -ladvapi32 -lshell32 -lgcc_s -lgcc_s -lgcc /usr/lib/gcc/i686-pc-msys/6.4.0/crtend.o
+")
+set(msys_g77_libs set(msys_g++_libs "stdc++;msys-2.0;user32;kernel32;advapi32;shell32")
+set(msys_g77_dirs "/usr/lib/gcc/i686-pc-msys/6.4.0;/usr/lib")
 list(APPEND platforms msys_g77)
 
 #-----------------------------------------------------------------------------
diff -Naur cmake-3.15.0-orig/Tests/Complex/Library/CMakeLists.txt cmake-3.15.0/Tests/Complex/Library/CMakeLists.txt
--- cmake-3.15.0-orig/Tests/Complex/Library/CMakeLists.txt	2019-07-17 15:07:18.000000000 +0300
+++ cmake-3.15.0/Tests/Complex/Library/CMakeLists.txt	2019-07-18 09:04:26.352894700 +0300
@@ -24,7 +24,7 @@
 add_library(CMakeTestLibrary ${LibrarySources})
 
 if(WIN32)
-  if(NOT CYGWIN)
+  if(NOT CYGWIN AND NOT MSYS)
     if(NOT BORLAND)
       if(NOT MINGW)
         target_link_libraries(CMakeTestLibrary
diff -Naur cmake-3.15.0-orig/Tests/ComplexOneConfig/Library/CMakeLists.txt cmake-3.15.0/Tests/ComplexOneConfig/Library/CMakeLists.txt
--- cmake-3.15.0-orig/Tests/ComplexOneConfig/Library/CMakeLists.txt	2019-07-17 15:07:18.000000000 +0300
+++ cmake-3.15.0/Tests/ComplexOneConfig/Library/CMakeLists.txt	2019-07-18 09:04:26.368494800 +0300
@@ -24,7 +24,7 @@
 add_library(CMakeTestLibrary ${LibrarySources})
 
 if(WIN32)
-  if(NOT CYGWIN)
+  if(NOT CYGWIN AND NOT MSYS)
     if(NOT BORLAND)
       if(NOT MINGW)
         target_link_libraries(CMakeTestLibrary
diff -Naur cmake-3.15.0-orig/Tests/ExternalProject/CMakeLists.txt cmake-3.15.0/Tests/ExternalProject/CMakeLists.txt
--- cmake-3.15.0-orig/Tests/ExternalProject/CMakeLists.txt	2019-07-17 15:07:18.000000000 +0300
+++ cmake-3.15.0/Tests/ExternalProject/CMakeLists.txt	2019-07-18 09:04:26.384094800 +0300
@@ -110,7 +110,7 @@
 endif()
 
 if(do_cvs_tests AND NOT UNIX)
-  if("${CVS_EXECUTABLE}" MATCHES "cygwin")
+  if("${CVS_EXECUTABLE}" MATCHES "cygwin" OR "${CVS_EXECUTABLE}" MATCHES "MSYS")
     message(STATUS "No ExternalProject cvs tests with cygwin cvs.exe outside cygwin!")
     set(do_cvs_tests 0)
   endif()
@@ -474,7 +474,7 @@
 endif()
 
 if(do_hg_tests AND NOT UNIX)
-  if("${HG_EXECUTABLE}" MATCHES "cygwin")
+  if("${HG_EXECUTABLE}" MATCHES "cygwin" OR "${CVS_EXECUTABLE}" MATCHES "MSYS")
     message(STATUS "No ExternalProject hg tests with cygwin hg outside cygwin!")
     set(do_hg_tests 0)
   endif()
diff -Naur cmake-3.15.0-orig/Tests/FindPackageTest/CMakeLists.txt cmake-3.15.0/Tests/FindPackageTest/CMakeLists.txt
--- cmake-3.15.0-orig/Tests/FindPackageTest/CMakeLists.txt	2019-07-17 15:07:18.000000000 +0300
+++ cmake-3.15.0/Tests/FindPackageTest/CMakeLists.txt	2019-07-18 09:04:26.415294800 +0300
@@ -65,7 +65,7 @@
 #-----------------------------------------------------------------------------
 # Test system package registry if possible.
 set(CMakeTestSystemPackage "")
-if(WIN32 AND NOT CYGWIN)
+if(WIN32 AND NOT CYGWIN AND NOT MSYS)
   # Try writing a value to the system package registry.
   set(_data "${FindPackageTest_SOURCE_DIR}/SystemPackage")
   set(_key "HKLM\\Software\\Kitware\\CMake\\Packages\\CMakeTestSystemPackage")
diff -Naur cmake-3.15.0-orig/Tests/Fortran/CMakeLists.txt cmake-3.15.0/Tests/Fortran/CMakeLists.txt
--- cmake-3.15.0-orig/Tests/Fortran/CMakeLists.txt	2019-07-17 15:07:18.000000000 +0300
+++ cmake-3.15.0/Tests/Fortran/CMakeLists.txt	2019-07-18 09:04:26.415294800 +0300
@@ -25,7 +25,7 @@
 
 # Pick a module .def file with the properly mangled symbol name.
 set(world_def "")
-if(WIN32 AND NOT CYGWIN)
+if(WIN32 AND NOT CYGWIN AND NOT MSYS)
   if(CMAKE_Fortran_COMPILER_ID MATCHES "GNU")
     set(world_def world_gnu.def)
   elseif(CMAKE_Fortran_COMPILER_ID MATCHES "Intel" OR
diff -Naur cmake-3.15.0-orig/Tests/Jump/Library/Shared/CMakeLists.txt cmake-3.15.0/Tests/Jump/Library/Shared/CMakeLists.txt
--- cmake-3.15.0-orig/Tests/Jump/Library/Shared/CMakeLists.txt	2019-07-17 15:07:18.000000000 +0300
+++ cmake-3.15.0/Tests/Jump/Library/Shared/CMakeLists.txt	2019-07-18 09:04:26.446494900 +0300
@@ -1,6 +1,6 @@
 add_library(jumpShared SHARED jumpShared.cxx)
 
-if(WIN32 OR CYGWIN)
+if(WIN32 OR CYGWIN OR MSYS)
   set(SHARED_MUST_BE_IN_EXE_DIR 1)
 endif()
 
diff -Naur cmake-3.15.0-orig/Tests/PerConfig/CMakeLists.txt cmake-3.15.0/Tests/PerConfig/CMakeLists.txt
--- cmake-3.15.0-orig/Tests/PerConfig/CMakeLists.txt	2019-07-17 15:07:18.000000000 +0300
+++ cmake-3.15.0/Tests/PerConfig/CMakeLists.txt	2019-07-18 09:04:26.477695000 +0300
@@ -9,7 +9,7 @@
 set_property(TARGET pcShared PROPERTY DEBUG_POSTFIX -dbg)
 set_property(TARGET pcShared PROPERTY VERSION 1.2)
 set_property(TARGET pcShared PROPERTY SOVERSION 3)
-if(UNIX AND NOT CYGWIN)
+if(UNIX AND NOT CYGWIN AND NOT MSYS)
   set(soname_file -DpcShared_soname_file=$<TARGET_SONAME_FILE:pcShared>)
 endif()
 add_executable(perconfig perconfig.c)
diff -Naur cmake-3.15.0-orig/Tests/RunCMake/CMakeLists.txt cmake-3.15.0/Tests/RunCMake/CMakeLists.txt
--- cmake-3.15.0-orig/Tests/RunCMake/CMakeLists.txt	2019-07-17 15:07:18.000000000 +0300
+++ cmake-3.15.0/Tests/RunCMake/CMakeLists.txt	2019-07-18 09:28:44.013183500 +0300
@@ -408,7 +408,7 @@
   set(NO_NAMELINK 0)
 endif()
 
-add_RunCMake_test(install -DNO_NAMELINK=${NO_NAMELINK} -DCYGWIN=${CYGWIN})
+add_RunCMake_test(install -DNO_NAMELINK=${NO_NAMELINK} -DCYGWIN=${CYGWIN} -DMSYS=${MSYS})
 add_RunCMake_test(CPackCommandLine)
 add_RunCMake_test(CPackConfig)
 add_RunCMake_test(CPackInstallProperties)
@@ -454,7 +454,7 @@
  -DPSEUDO_EMULATOR_CUSTOM_COMMAND=$<TARGET_FILE:pseudo_emulator_custom_command>
  -DPSEUDO_EMULATOR_CUSTOM_COMMAND_ARG=$<TARGET_FILE:pseudo_emulator_custom_command_arg>)
 if("${CMAKE_GENERATOR}" MATCHES "Make|Ninja")
-  if(UNIX AND NOT CYGWIN)
+  if(UNIX AND NOT CYGWIN AND NOT MSYS)
     execute_process(COMMAND ldd --help
       OUTPUT_VARIABLE LDD_HELP
       ERROR_VARIABLE LDD_ERR)
diff -Naur cmake-3.15.0-orig/Tests/RunCMake/CommandLine/RunCMakeTest.cmake cmake-3.15.0/Tests/RunCMake/CommandLine/RunCMakeTest.cmake
--- cmake-3.15.0-orig/Tests/RunCMake/CommandLine/RunCMakeTest.cmake	2019-07-17 15:07:18.000000000 +0300
+++ cmake-3.15.0/Tests/RunCMake/CommandLine/RunCMakeTest.cmake	2019-07-18 09:04:26.508895000 +0300
@@ -525,7 +525,7 @@
     run_cmake_command(reject_fifo ${BASH_EXECUTABLE} -c ${BASH_COMMAND_ARGUMENT})
   endif()
 endfunction()
-if(CMAKE_HOST_UNIX AND NOT CMAKE_SYSTEM_NAME STREQUAL "CYGWIN")
+if(CMAKE_HOST_UNIX AND NOT CMAKE_SYSTEM_NAME STREQUAL "CYGWIN" NOT CMAKE_SYSTEM_NAME STREQUAL "MSYS")
   reject_fifo()
   run_cmake_command(closed_stdin  sh -c "\"${CMAKE_COMMAND}\" --version <&-")
   run_cmake_command(closed_stdout sh -c "\"${CMAKE_COMMAND}\" --version >&-")
diff -Naur cmake-3.15.0-orig/Tests/RunCMake/file/RunCMakeTest.cmake cmake-3.15.0/Tests/RunCMake/file/RunCMakeTest.cmake
--- cmake-3.15.0-orig/Tests/RunCMake/file/RunCMakeTest.cmake	2019-07-17 15:07:19.000000000 +0300
+++ cmake-3.15.0/Tests/RunCMake/file/RunCMakeTest.cmake	2019-07-18 09:04:26.524495000 +0300
@@ -58,7 +58,7 @@
 run_cmake_command(GLOB-error-CONFIGURE_DEPENDS-SCRIPT_MODE ${CMAKE_COMMAND} -P
   ${RunCMake_SOURCE_DIR}/GLOB-error-CONFIGURE_DEPENDS-SCRIPT_MODE.cmake)
 
-if(NOT WIN32 OR CYGWIN)
+if(NOT WIN32 OR CYGWIN OR MSYS)
   run_cmake(CREATE_LINK-SYMBOLIC)
   run_cmake(CREATE_LINK-SYMBOLIC-noexist)
   run_cmake(GLOB_RECURSE-cyclic-recursion)
diff -Naur cmake-3.15.0-orig/Tests/RunCMake/find_file/RunCMakeTest.cmake cmake-3.15.0/Tests/RunCMake/find_file/RunCMakeTest.cmake
--- cmake-3.15.0-orig/Tests/RunCMake/find_file/RunCMakeTest.cmake	2019-07-17 15:07:19.000000000 +0300
+++ cmake-3.15.0/Tests/RunCMake/find_file/RunCMakeTest.cmake	2019-07-18 09:04:26.540095100 +0300
@@ -1,5 +1,5 @@
 include(RunCMake)
 
-if(WIN32 OR CYGWIN)
+if(WIN32 OR CYGWIN OR MSYS)
   run_cmake(PrefixInPATH)
 endif()
diff -Naur cmake-3.15.0-orig/Tests/RunCMake/find_library/RunCMakeTest.cmake cmake-3.15.0/Tests/RunCMake/find_library/RunCMakeTest.cmake
--- cmake-3.15.0-orig/Tests/RunCMake/find_library/RunCMakeTest.cmake	2019-07-17 15:07:19.000000000 +0300
+++ cmake-3.15.0/Tests/RunCMake/find_library/RunCMakeTest.cmake	2019-07-18 09:04:26.540095100 +0300
@@ -4,6 +4,6 @@
 if(CMAKE_HOST_UNIX)
   run_cmake(LibArchLink)
 endif()
-if(WIN32 OR CYGWIN)
+if(WIN32 OR CYGWIN OR MSYS)
   run_cmake(PrefixInPATH)
 endif()
diff -Naur cmake-3.15.0-orig/Tests/RunCMake/find_path/RunCMakeTest.cmake cmake-3.15.0/Tests/RunCMake/find_path/RunCMakeTest.cmake
--- cmake-3.15.0-orig/Tests/RunCMake/find_path/RunCMakeTest.cmake	2019-07-17 15:07:19.000000000 +0300
+++ cmake-3.15.0/Tests/RunCMake/find_path/RunCMakeTest.cmake	2019-07-18 09:04:26.555695100 +0300
@@ -1,7 +1,7 @@
 include(RunCMake)
 
 run_cmake(EmptyOldStyle)
-if(WIN32 OR CYGWIN)
+if(WIN32 OR CYGWIN OR MSYS)
   run_cmake(PrefixInPATH)
 endif()
 
diff -Naur cmake-3.15.0-orig/Tests/RunCMake/find_program/RunCMakeTest.cmake cmake-3.15.0/Tests/RunCMake/find_program/RunCMakeTest.cmake
--- cmake-3.15.0-orig/Tests/RunCMake/find_program/RunCMakeTest.cmake	2019-07-17 15:07:19.000000000 +0300
+++ cmake-3.15.0/Tests/RunCMake/find_program/RunCMakeTest.cmake	2019-07-18 09:04:26.555695100 +0300
@@ -5,7 +5,7 @@
 run_cmake(NamesPerDir)
 run_cmake(RelAndAbsPath)
 
-if(CMAKE_SYSTEM_NAME MATCHES "^(Windows|CYGWIN)$")
+if(CMAKE_SYSTEM_NAME MATCHES "^(Windows|CYGWIN|MSYS)$")
   run_cmake(WindowsCom)
   run_cmake(WindowsExe)
 endif()
diff -Naur cmake-3.15.0-orig/Tests/RunCMake/GenerateExportHeader/GEH.cmake cmake-3.15.0/Tests/RunCMake/GenerateExportHeader/GEH.cmake
--- cmake-3.15.0-orig/Tests/RunCMake/GenerateExportHeader/GEH.cmake	2019-07-17 15:07:18.000000000 +0300
+++ cmake-3.15.0/Tests/RunCMake/GenerateExportHeader/GEH.cmake	2019-07-18 09:04:26.555695100 +0300
@@ -107,13 +107,13 @@
 add_executable(GenerateExportHeader exportheader_test.cpp)
 
 target_link_libraries(GenerateExportHeader ${link_libraries})
-if (WIN32 OR CYGWIN)
+if (WIN32 OR CYGWIN OR MSYS)
   if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" AND
     CMAKE_CXX_SIMULATE_ID STREQUAL "MSVC")
     set(_platform Win32-Clang)
   elseif(MSVC AND COMPILER_HAS_DEPRECATED)
     set(_platform Win32)
-  elseif((MINGW OR CYGWIN) AND COMPILER_HAS_DEPRECATED)
+  elseif((MINGW OR CYGWIN OR MSYS) AND COMPILER_HAS_DEPRECATED)
     set(_platform MinGW)
   else()
     set(_platform WinEmpty)
diff -Naur cmake-3.15.0-orig/Tests/RunCMake/GenerateExportHeader/GEH-failures.cmake cmake-3.15.0/Tests/RunCMake/GenerateExportHeader/GEH-failures.cmake
--- cmake-3.15.0-orig/Tests/RunCMake/GenerateExportHeader/GEH-failures.cmake	2019-07-17 15:07:18.000000000 +0300
+++ cmake-3.15.0/Tests/RunCMake/GenerateExportHeader/GEH-failures.cmake	2019-07-18 09:04:26.571295100 +0300
@@ -5,7 +5,7 @@
 # Check if we should do anything. If the compiler doesn't support hidden
 # visibility, the failure tests won't fail, so just write an empty targets
 # list and punt.
-if(NOT WIN32 AND NOT CYGWIN AND NOT COMPILER_HAS_HIDDEN_VISIBILITY)
+if(NOT WIN32 AND NOT CYGWIN AND NOT MSYS AND NOT COMPILER_HAS_HIDDEN_VISIBILITY)
   return()
 endif()
 
diff -Naur cmake-3.15.0-orig/Tests/RunCMake/GeneratorExpression/TARGET_FILE_BASE_NAME.cmake cmake-3.15.0/Tests/RunCMake/GeneratorExpression/TARGET_FILE_BASE_NAME.cmake
--- cmake-3.15.0-orig/Tests/RunCMake/GeneratorExpression/TARGET_FILE_BASE_NAME.cmake	2019-07-17 15:07:18.000000000 +0300
+++ cmake-3.15.0/Tests/RunCMake/GeneratorExpression/TARGET_FILE_BASE_NAME.cmake	2019-07-18 09:20:15.855890900 +0300
@@ -72,8 +72,8 @@
 string (APPEND GENERATE_CONTENT [[
 
 check_value ("TARGET_FILE_BASE_NAME executable all properties" "$<TARGET_FILE_BASE_NAME:exec3>" "exec3_runtime")
-check_value ("TARGET_FILE_BASE_NAME shared all properties" "$<TARGET_FILE_BASE_NAME:shared3>" "$<IF:$<IN_LIST:$<PLATFORM_ID>,Windows$<SEMICOLON>CYGWIN>,shared3_runtime,shared3_library>")
-check_value ("TARGET_LINKER_FILE_BASE_NAME shared linker all properties" "$<TARGET_LINKER_FILE_BASE_NAME:shared3>" "$<IF:$<IN_LIST:$<PLATFORM_ID>,Windows$<SEMICOLON>CYGWIN>,shared3_archive,shared3_library>")
+check_value ("TARGET_FILE_BASE_NAME shared all properties" "$<TARGET_FILE_BASE_NAME:shared3>" "$<IF:$<IN_LIST:$<PLATFORM_ID>,Windows$<SEMICOLON>CYGWIN$<SEMICOLON>MSYS>,shared3_runtime,shared3_library>")
+check_value ("TARGET_LINKER_FILE_BASE_NAME shared linker all properties" "$<TARGET_LINKER_FILE_BASE_NAME:shared3>" "$<IF:$<IN_LIST:$<PLATFORM_ID>,Windows$<SEMICOLON>CYGWIN$<SEMICOLON>MSYS>,shared3_archive,shared3_library>")
 check_value ("TARGET_FILE_BASE_NAME static all properties" "$<TARGET_FILE_BASE_NAME:static3>" "static3_archive")
 check_value ("TARGET_LINKER_FILE_BASE_NAME static linker all properties" "$<TARGET_LINKER_FILE_BASE_NAME:static3>" "static3_archive")
 ]])
@@ -118,8 +118,8 @@
 string (APPEND GENERATE_CONTENT [[
 
 check_value ("TARGET_FILE_BASE_NAME executable all properties + postfix" "$<TARGET_FILE_BASE_NAME:exec4>" "exec4_runtime_postfix")
-check_value ("TARGET_FILE_BASE_NAME shared all properties + postfix" "$<TARGET_FILE_BASE_NAME:shared4>" "$<IF:$<IN_LIST:$<PLATFORM_ID>,Windows$<SEMICOLON>CYGWIN>,shared4_runtime,shared4_library>_postfix")
-check_value ("TARGET_LINKER_FILE_BASE_NAME shared linker all properties + postfix" "$<TARGET_LINKER_FILE_BASE_NAME:shared4>" "$<IF:$<IN_LIST:$<PLATFORM_ID>,Windows$<SEMICOLON>CYGWIN>,shared4_archive,shared4_library>_postfix")
+check_value ("TARGET_FILE_BASE_NAME shared all properties + postfix" "$<TARGET_FILE_BASE_NAME:shared4>" "$<IF:$<IN_LIST:$<PLATFORM_ID>,Windows$<SEMICOLON>CYGWIN$<SEMICOLON>MSYS>,shared4_runtime,shared4_library>_postfix")
+check_value ("TARGET_LINKER_FILE_BASE_NAME shared linker all properties + postfix" "$<TARGET_LINKER_FILE_BASE_NAME:shared4>" "$<IF:$<IN_LIST:$<PLATFORM_ID>,Windows$<SEMICOLON>CYGWIN$<SEMICOLON>MSYS>,shared4_archive,shared4_library>_postfix")
 check_value ("TARGET_FILE_BASE_NAME static all properties + postfix" "$<TARGET_FILE_BASE_NAME:static4>" "static4_archive_postfix")
 check_value ("TARGET_LINKER_FILE_BASE_NAME static linker all properties + postfix" "$<TARGET_LINKER_FILE_BASE_NAME:static4>" "static4_archive_postfix")
 ]])
diff -Naur cmake-3.15.0-orig/Tests/RunCMake/GeneratorExpression/TARGET_FILE_BASE_NAME-imported-target.cmake cmake-3.15.0/Tests/RunCMake/GeneratorExpression/TARGET_FILE_BASE_NAME-imported-target.cmake
--- cmake-3.15.0-orig/Tests/RunCMake/GeneratorExpression/TARGET_FILE_BASE_NAME-imported-target.cmake	2019-07-17 15:07:18.000000000 +0300
+++ cmake-3.15.0/Tests/RunCMake/GeneratorExpression/TARGET_FILE_BASE_NAME-imported-target.cmake	2019-07-18 09:20:00.365063600 +0300
@@ -58,8 +58,8 @@
 string (APPEND GENERATE_CONTENT [[
 
 check_value ("TARGET_FILE_BASE_NAME executable all properties" "$<TARGET_FILE_BASE_NAME:exec3>" "exec3_runtime")
-check_value ("TARGET_FILE_BASE_NAME shared all properties" "$<TARGET_FILE_BASE_NAME:shared3>" "$<IF:$<IN_LIST:$<PLATFORM_ID>,Windows$<SEMICOLON>CYGWIN>,shared3_runtime,shared3_library>")
-check_value ("TARGET_LINKER_FILE_BASE_NAME shared linker all properties" "$<TARGET_LINKER_FILE_BASE_NAME:shared3>" "$<IF:$<IN_LIST:$<PLATFORM_ID>,Windows$<SEMICOLON>CYGWIN>,shared3_archive,shared3_library>")
+check_value ("TARGET_FILE_BASE_NAME shared all properties" "$<TARGET_FILE_BASE_NAME:shared3>" "$<IF:$<IN_LIST:$<PLATFORM_ID>,Windows$<SEMICOLON>CYGWIN$<SEMICOLON>MSYS>,shared3_runtime,shared3_library>")
+check_value ("TARGET_LINKER_FILE_BASE_NAME shared linker all properties" "$<TARGET_LINKER_FILE_BASE_NAME:shared3>" "$<IF:$<IN_LIST:$<PLATFORM_ID>,Windows$<SEMICOLON>CYGWIN$<SEMICOLON>MSYS>,shared3_archive,shared3_library>")
 check_value ("TARGET_FILE_BASE_NAME static all properties" "$<TARGET_FILE_BASE_NAME:static3>" "static3_archive")
 check_value ("TARGET_LINKER_FILE_BASE_NAME static linker all properties" "$<TARGET_LINKER_FILE_BASE_NAME:static3>" "static3_archive")
 ]])
@@ -95,8 +95,8 @@
 string (APPEND GENERATE_CONTENT [[
 
 check_value ("TARGET_FILE_BASE_NAME executable all properties + postfix" "$<TARGET_FILE_BASE_NAME:exec4>" "exec4_runtime_postfix")
-check_value ("TARGET_FILE_BASE_NAME shared all properties + postfix" "$<TARGET_FILE_BASE_NAME:shared4>" "$<IF:$<IN_LIST:$<PLATFORM_ID>,Windows$<SEMICOLON>CYGWIN>,shared4_runtime,shared4_library>_postfix")
-check_value ("TARGET_LINKER_FILE_BASE_NAME shared linker all properties + postfix" "$<TARGET_LINKER_FILE_BASE_NAME:shared4>" "$<IF:$<IN_LIST:$<PLATFORM_ID>,Windows$<SEMICOLON>CYGWIN>,shared4_archive,shared4_library>_postfix")
+check_value ("TARGET_FILE_BASE_NAME shared all properties + postfix" "$<TARGET_FILE_BASE_NAME:shared4>" "$<IF:$<IN_LIST:$<PLATFORM_ID>,Windows$<SEMICOLON>CYGWIN$<SEMICOLON>MSYS>,shared4_runtime,shared4_library>_postfix")
+check_value ("TARGET_LINKER_FILE_BASE_NAME shared linker all properties + postfix" "$<TARGET_LINKER_FILE_BASE_NAME:shared4>" "$<IF:$<IN_LIST:$<PLATFORM_ID>,Windows$<SEMICOLON>CYGWIN$<SEMICOLON>MSYS>,shared4_archive,shared4_library>_postfix")
 check_value ("TARGET_FILE_BASE_NAME static all properties + postfix" "$<TARGET_FILE_BASE_NAME:static4>" "static4_archive_postfix")
 check_value ("TARGET_LINKER_FILE_BASE_NAME static linker all properties + postfix" "$<TARGET_LINKER_FILE_BASE_NAME:static4>" "static4_archive_postfix")
 ]])
diff -Naur cmake-3.15.0-orig/Tests/RunCMake/GeneratorExpression/TARGET_FILE_PREFIX.cmake cmake-3.15.0/Tests/RunCMake/GeneratorExpression/TARGET_FILE_PREFIX.cmake
--- cmake-3.15.0-orig/Tests/RunCMake/GeneratorExpression/TARGET_FILE_PREFIX.cmake	2019-07-17 15:07:18.000000000 +0300
+++ cmake-3.15.0/Tests/RunCMake/GeneratorExpression/TARGET_FILE_PREFIX.cmake	2019-07-18 09:21:46.882050700 +0300
@@ -3,7 +3,7 @@
 
 enable_language (C)
 
-set (win_platforms Windows CYGWIN)
+set (win_platforms Windows CYGWIN MSYS)
 
 set (GENERATE_CONTENT [[
 macro (CHECK_VALUE test_msg value expected)
diff -Naur cmake-3.15.0-orig/Tests/RunCMake/GeneratorExpression/TARGET_FILE_PREFIX-imported-target.cmake cmake-3.15.0/Tests/RunCMake/GeneratorExpression/TARGET_FILE_PREFIX-imported-target.cmake
--- cmake-3.15.0-orig/Tests/RunCMake/GeneratorExpression/TARGET_FILE_PREFIX-imported-target.cmake	2019-07-17 15:07:18.000000000 +0300
+++ cmake-3.15.0/Tests/RunCMake/GeneratorExpression/TARGET_FILE_PREFIX-imported-target.cmake	2019-07-18 09:20:39.349532100 +0300
@@ -3,7 +3,7 @@
 
 enable_language (C)
 
-set (win_platforms Windows CYGWIN)
+set (win_platforms Windows CYGWIN MSYS)
 
 set (GENERATE_CONTENT [[
 macro (CHECK_VALUE test_msg value expected)
diff -Naur cmake-3.15.0-orig/Tests/RunCMake/GeneratorExpression/TARGET_FILE_SUFFIX.cmake cmake-3.15.0/Tests/RunCMake/GeneratorExpression/TARGET_FILE_SUFFIX.cmake
--- cmake-3.15.0-orig/Tests/RunCMake/GeneratorExpression/TARGET_FILE_SUFFIX.cmake	2019-07-17 15:07:18.000000000 +0300
+++ cmake-3.15.0/Tests/RunCMake/GeneratorExpression/TARGET_FILE_SUFFIX.cmake	2019-07-18 09:22:05.414883300 +0300
@@ -3,7 +3,7 @@
 
 enable_language (C)
 
-set (win_platforms Windows CYGWIN)
+set (win_platforms Windows CYGWIN MSYS)
 
 set (GENERATE_CONTENT [[
 macro (CHECK_VALUE test_msg value expected)
diff -Naur cmake-3.15.0-orig/Tests/RunCMake/GeneratorExpression/TARGET_FILE_SUFFIX-imported-target.cmake cmake-3.15.0/Tests/RunCMake/GeneratorExpression/TARGET_FILE_SUFFIX-imported-target.cmake
--- cmake-3.15.0-orig/Tests/RunCMake/GeneratorExpression/TARGET_FILE_SUFFIX-imported-target.cmake	2019-07-17 15:07:18.000000000 +0300
+++ cmake-3.15.0/Tests/RunCMake/GeneratorExpression/TARGET_FILE_SUFFIX-imported-target.cmake	2019-07-18 09:22:13.339697200 +0300
@@ -3,7 +3,7 @@
 
 enable_language (C)
 
-set (win_platforms Windows CYGWIN)
+set (win_platforms Windows CYGWIN MSYS)
 
 set (GENERATE_CONTENT [[
 macro (CHECK_VALUE test_msg value expected)
diff -Naur cmake-3.15.0-orig/Tests/RunCMake/install/TARGETS-Defaults-all-check.cmake cmake-3.15.0/Tests/RunCMake/install/TARGETS-Defaults-all-check.cmake
--- cmake-3.15.0-orig/Tests/RunCMake/install/TARGETS-Defaults-all-check.cmake	2019-07-17 15:07:19.000000000 +0300
+++ cmake-3.15.0/Tests/RunCMake/install/TARGETS-Defaults-all-check.cmake	2019-07-18 09:23:32.010635400 +0300
@@ -34,6 +34,24 @@
     [[lib4]]
     [[lib4/cyglib4\.dll]]
     )
+elseif(MSYS)
+  set(_check_files
+    [[bin]]
+    [[bin/msys-lib1\.dll]]
+    [[bin/exe\.exe]]
+    [[include]]
+    [[include/obj1\.h]]
+    [[include/obj2\.h]]
+    [[include/obj4\.h]]
+    [[include/obj5\.h]]
+    [[lib]]
+    [[lib/liblib1\.dll\.a]]
+    [[lib/liblib2\.a]]
+    [[lib3]]
+    [[lib3/liblib3\.dll\.a]]
+    [[lib4]]
+    [[lib4/msys-lib4\.dll]]
+    )
 else()
   set(_check_files
     [[bin]]
diff -Naur cmake-3.15.0-orig/Tests/RunCMake/install/TARGETS-Defaults-Cache-all-check.cmake cmake-3.15.0/Tests/RunCMake/install/TARGETS-Defaults-Cache-all-check.cmake
--- cmake-3.15.0-orig/Tests/RunCMake/install/TARGETS-Defaults-Cache-all-check.cmake	2019-07-17 15:07:19.000000000 +0300
+++ cmake-3.15.0/Tests/RunCMake/install/TARGETS-Defaults-Cache-all-check.cmake	2019-07-18 09:24:05.597494400 +0300
@@ -30,6 +30,22 @@
     [[mylib/liblib1\.dll\.a]]
     [[mylib/liblib2\.a]]
     )
+elseif(MSYS)
+  set(_check_files
+    [[lib3]]
+    [[lib3/liblib3\.dll\.a]]
+    [[lib4]]
+    [[lib4/msys-lib4\.dll]]
+    [[mybin]]
+    [[mybin/msys-lib1\.dll]]
+    [[mybin/exe\.exe]]
+    [[myinclude]]
+    [[myinclude/obj4\.h]]
+    [[myinclude/obj5\.h]]
+    [[mylib]]
+    [[mylib/liblib1\.dll\.a]]
+    [[mylib/liblib2\.a]]
+    )
 else()
   set(_check_files
     [[lib3]]
diff -Naur cmake-3.15.0-orig/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-all-check.cmake cmake-3.15.0/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-all-check.cmake
--- cmake-3.15.0-orig/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-all-check.cmake	2019-07-17 15:07:19.000000000 +0300
+++ cmake-3.15.0/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-all-check.cmake	2019-07-18 09:25:29.120041100 +0300
@@ -18,6 +18,16 @@
     [[lib/cygnamelink-uns-1\.dll]]
     [[lib/cygnamelink-uns-dev-1\.dll]]
   )
+elseif(MSYS)
+  set(_check_files
+    [[lib]]
+    [[lib/msys-namelink-none\.dll]]
+    [[lib/msys-namelink-same-1\.dll]]
+    [[lib/msys-namelink-sep-1\.dll]]
+    [[lib/msys-namelink-skip-1\.dll]]
+    [[lib/msys-namelink-uns-1\.dll]]
+    [[lib/msys-namelink-uns-dev-1\.dll]]
+  )
 elseif(APPLE)
   set(_check_files
     [[lib]]
diff -Naur cmake-3.15.0-orig/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-dev-check.cmake cmake-3.15.0/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-dev-check.cmake
--- cmake-3.15.0-orig/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-dev-check.cmake	2019-07-17 15:07:19.000000000 +0300
+++ cmake-3.15.0/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-dev-check.cmake	2019-07-18 09:25:47.294073000 +0300
@@ -1,4 +1,4 @@
-if(WIN32 OR CYGWIN OR NO_NAMELINK)
+if(WIN32 OR CYGWIN OR MSYS OR NO_NAMELINK)
   set(_check_files)
 else()
   set(_check_files
diff -Naur cmake-3.15.0-orig/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-lib-check.cmake cmake-3.15.0/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-lib-check.cmake
--- cmake-3.15.0-orig/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-lib-check.cmake	2019-07-17 15:07:19.000000000 +0300
+++ cmake-3.15.0/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-lib-check.cmake	2019-07-18 09:26:21.582933200 +0300
@@ -14,6 +14,14 @@
     [[lib/cygnamelink-sep-1\.dll]]
     [[lib/cygnamelink-skip-1\.dll]]
   )
+elseif(MSYS)
+  set(_check_files
+    [[lib]]
+    [[lib/msys-namelink-none\.dll]]
+    [[lib/msys-namelink-same-1\.dll]]
+    [[lib/msys-namelink-sep-1\.dll]]
+    [[lib/msys-namelink-skip-1\.dll]]
+  )
 elseif(APPLE)
   set(_check_files
     [[lib]]
diff -Naur cmake-3.15.0-orig/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-uns-check.cmake cmake-3.15.0/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-uns-check.cmake
--- cmake-3.15.0-orig/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-uns-check.cmake	2019-07-17 15:07:19.000000000 +0300
+++ cmake-3.15.0/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-uns-check.cmake	2019-07-18 09:26:48.820581100 +0300
@@ -10,6 +10,12 @@
     [[lib/cygnamelink-uns-1\.dll]]
     [[lib/cygnamelink-uns-dev-1\.dll]]
   )
+elseif(MSYS)
+  set(_check_files
+    [[lib]]
+    [[lib/msys-namelink-uns-1\.dll]]
+    [[lib/msys-namelink-uns-dev-1\.dll]]
+  )
 elseif(APPLE)
   set(_check_files
     [[lib]]
diff -Naur cmake-3.15.0-orig/Tests/RunCMake/install/TARGETS-OUTPUT_NAME-all-check.cmake cmake-3.15.0/Tests/RunCMake/install/TARGETS-OUTPUT_NAME-all-check.cmake
--- cmake-3.15.0-orig/Tests/RunCMake/install/TARGETS-OUTPUT_NAME-all-check.cmake	2019-07-17 15:07:19.000000000 +0300
+++ cmake-3.15.0/Tests/RunCMake/install/TARGETS-OUTPUT_NAME-all-check.cmake	2019-07-18 09:27:35.980463900 +0300
@@ -6,6 +6,8 @@
   check_installed("^bin;(${libtest45};${test123})|(${test123};${test45})\$")
 elseif(CYGWIN)
   check_installed([[^bin;bin/cygtest4\.dll;bin/libtest4\.dll\.a;bin/libtest5ar\.a;bin/test1out\.exe;bin/test2deb\.exe;bin/test3exc\.exe$]])
+elseif(MSYS)
+  check_installed([[^bin;bin/msys-test4\.dll;bin/libtest4\.dll\.a;bin/libtest5ar\.a;bin/test1out\.exe;bin/test2deb\.exe;bin/test3exc\.exe$]])
 elseif(APPLE)
   check_installed([[^bin;bin/libtest4lib\.dylib;bin/libtest5ar\.a;bin/test1out;bin/test2deb;bin/test3exc$]])
 else()
diff -Naur cmake-3.15.0-orig/Utilities/cmlibarchive/CMakeLists.txt cmake-3.15.0/Utilities/cmlibarchive/CMakeLists.txt
--- cmake-3.15.0-orig/Utilities/cmlibarchive/CMakeLists.txt	2019-07-17 15:07:19.000000000 +0300
+++ cmake-3.15.0/Utilities/cmlibarchive/CMakeLists.txt	2019-07-18 09:04:26.586895100 +0300
@@ -153,7 +153,7 @@
 #
 MACRO (TRY_MACRO_FOR_LIBRARY INCLUDES LIBRARIES
        TRY_TYPE SAMPLE_SOURCE MACRO_LIST)
-  IF(WIN32 AND NOT CYGWIN)
+  IF(WIN32 AND NOT CYGWIN AND NOT MSYS)
     CMAKE_PUSH_CHECK_STATE()	# Save the state of the variables
     SET(CMAKE_REQUIRED_INCLUDES ${INCLUDES})
     SET(CMAKE_REQUIRED_LIBRARIES ${LIBRARIES})
@@ -178,15 +178,15 @@
           "Macro ${VAR} is checked with")
     ENDFOREACH(VAR)
     CMAKE_POP_CHECK_STATE()	# Restore the state of the variables
-  ENDIF(WIN32 AND NOT CYGWIN)
+  ENDIF(WIN32 AND NOT CYGWIN AND NOT MSYS)
 ENDMACRO (TRY_MACRO_FOR_LIBRARY)
 #
 # Check compress/decompress libraries
 #
-IF(WIN32 AND NOT CMAKE_CL_64 AND NOT CYGWIN)
+IF(WIN32 AND NOT CMAKE_CL_64 AND NOT CYGWIN AND NOT MSYS)
   # GnuWin32 is only for Win32, not Win64.
   SET(__GNUWIN32PATH "C:/Program Files/GnuWin32")
-ENDIF(WIN32 AND NOT CMAKE_CL_64 AND NOT CYGWIN)
+ENDIF(WIN32 AND NOT CMAKE_CL_64 AND NOT CYGWIN AND NOT MSYS)
 IF(DEFINED __GNUWIN32PATH AND EXISTS "${__GNUWIN32PATH}")
   # You have to add a path availabel DLL file into PATH environment variable.
   # Maybe DLL path is "C:/Program Files/GnuWin32/bin".
@@ -229,7 +229,7 @@
   SET(HAVE_ZLIB_H 1)
   INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})
   LIST(APPEND ADDITIONAL_LIBS ${ZLIB_LIBRARIES})
-  IF(WIN32 AND NOT CYGWIN)
+  IF(WIN32 AND NOT CYGWIN AND NOT MSYS)
     #
     # Test if ZLIB_WINAPI macro is needed to use.
     #
@@ -251,7 +251,7 @@
         ADD_DEFINITIONS(-DZLIB_DLL)
       ENDIF(ZLIB_DLL)
     ENDIF(ZLIB_WINAPI)
-  ENDIF(WIN32 AND NOT CYGWIN)
+  ENDIF(WIN32 AND NOT CYGWIN AND NOT MSYS)
 ELSE(ZLIB_FOUND)
   MESSAGE(FATAL_ERROR "CMake requires zlib to be available to libarchive")
 ENDIF(ZLIB_FOUND)
@@ -679,7 +679,7 @@
 # of Windows XP do not support SHA256, SHA384 and SHA512.
 #
 MACRO(CHECK_CRYPTO_WIN CRYPTO_LIST)
-  IF(WIN32 AND NOT CYGWIN)
+  IF(WIN32 AND NOT CYGWIN AND NOT MSYS)
     FOREACH(CRYPTO ${CRYPTO_LIST})
       IF(NOT ARCHIVE_CRYPTO_${CRYPTO})
       IF(NOT DEFINED ARCHIVE_CRYPTO_${CRYPTO}_WIN)
@@ -746,7 +746,7 @@
       ENDIF(NOT DEFINED ARCHIVE_CRYPTO_${CRYPTO}_WIN)
       ENDIF(NOT ARCHIVE_CRYPTO_${CRYPTO})
     ENDFOREACH(CRYPTO)
-  ENDIF(WIN32 AND NOT CYGWIN)
+  ENDIF(WIN32 AND NOT CYGWIN AND NOT MSYS)
 ENDMACRO(CHECK_CRYPTO_WIN CRYPTO_LIST)
 
 #
@@ -850,7 +850,7 @@
     FIND_LIBRARY(LIBCHARSET_PATH NAMES charset libcharset)
     IF(LIBCHARSET_PATH)
       SET(CMAKE_REQUIRED_LIBRARIES ${LIBCHARSET_PATH})
-      IF(WIN32 AND NOT CYGWIN)
+      IF(WIN32 AND NOT CYGWIN AND NOT MSYS)
         # Test if a macro is needed for the library.
         TRY_MACRO_FOR_LIBRARY(
           "${ICONV_INCLUDE_DIR}" "${LIBCHARSET_PATH}"
@@ -864,9 +864,9 @@
           SET(HAVE_LOCALE_CHARSET ON CACHE INTERNAL
               "Have function locale_charset")
         ENDIF(WITHOUT_LIBCHARSET_STATIC OR LIBCHARSET_STATIC)
-      ELSE(WIN32 AND NOT CYGWIN)
+      ELSE(WIN32 AND NOT CYGWIN AND NOT MSYS)
         CHECK_FUNCTION_EXISTS_GLIBC(locale_charset HAVE_LOCALE_CHARSET)
-      ENDIF(WIN32 AND NOT CYGWIN)
+      ENDIF(WIN32 AND NOT CYGWIN AND NOT MSYS)
       IF(HAVE_LOCALE_CHARSET)
         LIST(APPEND ADDITIONAL_LIBS ${LIBCHARSET_PATH})
       ENDIF(HAVE_LOCALE_CHARSET)
@@ -1638,7 +1638,7 @@
 #
 # Register installation of PDF documents.
 #
-IF(WIN32 AND NOT CYGWIN)
+IF(WIN32 AND NOT CYGWIN AND NOT MSYS)
   #
   # On Windows platform, It's better that we install PDF documents
   # on one's computer.
@@ -1650,7 +1650,7 @@
             FILES_MATCHING PATTERN "*.pdf"
     )
   ENDIF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/doc/pdf)
-ENDIF(WIN32 AND NOT CYGWIN)
+ENDIF(WIN32 AND NOT CYGWIN AND NOT MSYS)
 #
 #
 #
diff -Naur cmake-3.15.0-orig/Utilities/cmlibarchive/libarchive/CMakeLists.txt cmake-3.15.0/Utilities/cmlibarchive/libarchive/CMakeLists.txt
--- cmake-3.15.0-orig/Utilities/cmlibarchive/libarchive/CMakeLists.txt	2019-07-17 15:07:19.000000000 +0300
+++ cmake-3.15.0/Utilities/cmlibarchive/libarchive/CMakeLists.txt	2019-07-18 09:04:26.602495200 +0300
@@ -206,14 +206,14 @@
   tar.5
 )
 
-IF(WIN32 AND NOT CYGWIN)
+IF(WIN32 AND NOT CYGWIN AND NOT MSYS)
   LIST(APPEND libarchive_SOURCES archive_entry_copy_bhfi.c)
   LIST(APPEND libarchive_SOURCES archive_read_disk_windows.c)
   LIST(APPEND libarchive_SOURCES archive_windows.c)
   LIST(APPEND libarchive_SOURCES archive_windows.h)
   LIST(APPEND libarchive_SOURCES archive_write_disk_windows.c)
   LIST(APPEND libarchive_SOURCES filter_fork_windows.c)
-ENDIF(WIN32 AND NOT CYGWIN)
+ENDIF(WIN32 AND NOT CYGWIN AND NOT MSYS)
 
 IF(ARCHIVE_ACL_DARWIN)
   LIST(APPEND libarchive_SOURCES archive_disk_acl_darwin.c)
diff -Naur cmake-3.15.0-orig/Utilities/cmlibuv/CMakeLists.txt cmake-3.15.0/Utilities/cmlibuv/CMakeLists.txt
--- cmake-3.15.0-orig/Utilities/cmlibuv/CMakeLists.txt	2019-07-17 15:07:19.000000000 +0300
+++ cmake-3.15.0/Utilities/cmlibuv/CMakeLists.txt	2019-07-18 09:30:21.779555300 +0300
@@ -137,7 +137,7 @@
     )
 endif()
 
-if(CMAKE_SYSTEM_NAME MATCHES "CYGWIN")
+if(CMAKE_SYSTEM_NAME MATCHES "CYGWIN" OR CMAKE_SYSTEM_NAME MATCHES "MSYS")
   list(APPEND uv_libraries
     )
   list(APPEND uv_headers
diff -Naur cmake-3.15.0-orig/Utilities/Release/release_cmake.cmake cmake-3.15.0/Utilities/Release/release_cmake.cmake
--- cmake-3.15.0-orig/Utilities/Release/release_cmake.cmake	2019-07-17 15:07:19.000000000 +0300
+++ cmake-3.15.0/Utilities/Release/release_cmake.cmake	2019-07-18 09:04:26.633695200 +0300
@@ -115,6 +115,10 @@
   if("${gen}" STREQUAL "TBZ2")
     set(SUFFIXES ${SUFFIXES} "*.tar.bz2")
   endif()
+  if("${gen}" MATCHES "MSYS")
+    set(SUFFIXES ${SUFFIXES} "*.tar.bz2")
+    set(extra_files setup.hint)
+  endif()
   if("${gen}" STREQUAL "TZ")
     set(SUFFIXES ${SUFFIXES} "*.tar.Z")
   endif()
