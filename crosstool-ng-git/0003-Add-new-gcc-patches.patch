From b75fc4b1087d49e089afc75e48fdf7fa23044894 Mon Sep 17 00:00:00 2001
From: Atom Long <atom.long@hotmail.com>
Date: Sat, 6 Jul 2019 08:55:52 +0800
Subject: [PATCH] Add new gcc patches

---
 packages/gcc/7.4.0/0100-configure.patch       |  28 +++
 .../gcc/7.4.0/0101-libgcc-configure.patch     |  12 ++
 .../gcc/7.4.0/0102-libgcc-mkheader_sh.patch   |  15 ++
 .../gcc/7.4.0/0103-port-for-cortex-m.patch    | 160 +++++++++++++++++
 packages/gcc/7.4.0/0104-gcc-configure.patch   |  12 ++
 packages/gcc/8.3.0/0100-configure.patch       |  28 +++
 .../gcc/8.3.0/0101-libgcc-configure.patch     |  12 ++
 .../gcc/8.3.0/0102-libgcc-mkheader_sh.patch   |  15 ++
 .../gcc/8.3.0/0103-port-for-cortex-m.patch    | 165 ++++++++++++++++++
 packages/gcc/8.3.0/0104-gcc-configure.patch   |  12 ++
 10 files changed, 459 insertions(+)
 create mode 100644 packages/gcc/7.4.0/0100-configure.patch
 create mode 100644 packages/gcc/7.4.0/0101-libgcc-configure.patch
 create mode 100644 packages/gcc/7.4.0/0102-libgcc-mkheader_sh.patch
 create mode 100644 packages/gcc/7.4.0/0103-port-for-cortex-m.patch
 create mode 100644 packages/gcc/7.4.0/0104-gcc-configure.patch
 create mode 100644 packages/gcc/8.3.0/0100-configure.patch
 create mode 100644 packages/gcc/8.3.0/0101-libgcc-configure.patch
 create mode 100644 packages/gcc/8.3.0/0102-libgcc-mkheader_sh.patch
 create mode 100644 packages/gcc/8.3.0/0103-port-for-cortex-m.patch
 create mode 100644 packages/gcc/8.3.0/0104-gcc-configure.patch

diff --git a/packages/gcc/7.4.0/0100-configure.patch b/packages/gcc/7.4.0/0100-configure.patch
new file mode 100644
index 00000000..260b3041
--- /dev/null
+++ b/packages/gcc/7.4.0/0100-configure.patch
@@ -0,0 +1,28 @@
+diff -durN gcc-7.4.0.orig/configure gcc-7.4.0/configure
+--- gcc-7.4.0.orig/configure	2018-06-23 05:16:41.433339000 +0800
++++ gcc-7.4.0/configure	2018-12-20 19:53:23.170981800 +0800
+@@ -1384,6 +1384,8 @@
+   eval ac_cv_env_${ac_var}_value=\$${ac_var}
+ done
+ 
++[[ "$(uname)" == MINGW* && -n "${srcdir}" ]] && srcdir="$(cygpath -m ${srcdir})"
++
+ #
+ # Report the --help message.
+ #
+@@ -7579,6 +7581,15 @@
+     ;;
+ esac
+ 
++# Check whether --with-local-prefix was given.
++if test "${with_local_prefix+set}" = set; then :
++  withval=$with_local_prefix;
++  if [ "$withval" != "" ] && [ -d "$withval/include" ] &&
++	! (grep -qP "\-isystem\s+$withval/include" <<< ${FLAGS_FOR_TARGET}); then
++     FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET" -isystem $withval/include"
++  fi
++fi
++
+ # Makefile fragments.
+ for frag in host_makefile_frag target_makefile_frag alphaieee_frag ospace_frag;
+ do
diff --git a/packages/gcc/7.4.0/0101-libgcc-configure.patch b/packages/gcc/7.4.0/0101-libgcc-configure.patch
new file mode 100644
index 00000000..e66fa383
--- /dev/null
+++ b/packages/gcc/7.4.0/0101-libgcc-configure.patch
@@ -0,0 +1,12 @@
+diff -durN gcc-7.4.0.orig/libgcc/configure gcc-7.4.0/libgcc/configure
+--- gcc-7.4.0.orig/libgcc/configure	2018-06-23 05:16:41.433339000 +0800
++++ gcc-7.4.0/libgcc/configure	2018-12-20 19:58:30.983481800 +0800
+@@ -1223,6 +1223,8 @@
+   eval ac_cv_env_${ac_var}_value=\$${ac_var}
+ done
+ 
++[[ "$(uname)" == MINGW* && -n "${srcdir}" ]] && srcdir="$(cygpath -m ${srcdir})"
++
+ #
+ # Report the --help message.
+ #
diff --git a/packages/gcc/7.4.0/0102-libgcc-mkheader_sh.patch b/packages/gcc/7.4.0/0102-libgcc-mkheader_sh.patch
new file mode 100644
index 00000000..cbc38d80
--- /dev/null
+++ b/packages/gcc/7.4.0/0102-libgcc-mkheader_sh.patch
@@ -0,0 +1,15 @@
+diff -durN gcc-7.4.0.orig/libgcc/mkheader.sh gcc-7.4.0/libgcc/mkheader.sh
+--- gcc-7.4.0.orig/libgcc/mkheader.sh	2017-01-01 20:07:43.905435000 +0800
++++ gcc-7.4.0/libgcc/mkheader.sh	2018-12-20 20:01:56.077231800 +0800
+@@ -34,7 +34,11 @@
+ done
+ 
+ for file in $HEADERS; do
++if [[ "$(uname)" == MINGW* ]]; then
++	echo "#include \"$(cygpath -m $file)\""
++else
+     echo "#include \"$file\""
++fi
+ done
+ 
+ # Add multiple inclusion protection guard, part two.
diff --git a/packages/gcc/7.4.0/0103-port-for-cortex-m.patch b/packages/gcc/7.4.0/0103-port-for-cortex-m.patch
new file mode 100644
index 00000000..5ae51d7c
--- /dev/null
+++ b/packages/gcc/7.4.0/0103-port-for-cortex-m.patch
@@ -0,0 +1,160 @@
+diff -durNp gcc-7.4.0.orig/gcc/config/arm/arm.c gcc-7.4.0/gcc/config/arm/arm.c
+--- gcc-7.4.0.orig/gcc/config/arm/arm.c	2018-11-22 00:50:37.525191000 +0800
++++ gcc-7.4.0/gcc/config/arm/arm.c	2018-12-20 21:38:08.843750000 +0800
+@@ -3266,6 +3266,32 @@ arm_option_override (void)
+       target_fpu_name = "vfp";
+ #endif
+ 
++	switch(global_options.x_arm_cpu_option)
++	{
++		case TARGET_CPU_cortexm4:
++		case TARGET_CPU_cortexm7:
++			target_fpu_name = "fpv4-sp-d16";
++			break;
++		case TARGET_CPU_cortexr4:
++		case TARGET_CPU_cortexr4f:
++		case TARGET_CPU_cortexr5:
++		case TARGET_CPU_cortexr7:
++			target_fpu_name = "vfpv3";
++			break;
++		case TARGET_CPU_cortexa5:
++		case TARGET_CPU_cortexa7:
++			target_fpu_name = "vfpv4-d16";
++			break;
++		case TARGET_CPU_cortexa8:
++		case TARGET_CPU_cortexa9:
++			target_fpu_name = "vfpv3";
++			break;
++		case TARGET_CPU_cortexa12:
++		case TARGET_CPU_cortexa15:
++			target_fpu_name = "vfpv4";
++			break;
++	}
++
+       ok = opt_enum_arg_to_value (OPT_mfpu_, target_fpu_name, &fpu_index,
+ 				  CL_TARGET);
+       gcc_assert (ok);
+diff -durNp gcc-7.4.0.orig/gcc/config/arm/t-arm-elf gcc-7.4.0/gcc/config/arm/t-arm-elf
+--- gcc-7.4.0.orig/gcc/config/arm/t-arm-elf	2017-01-01 20:07:43.905435000 +0800
++++ gcc-7.4.0/gcc/config/arm/t-arm-elf	2018-12-20 21:41:54.046875000 +0800
+@@ -38,12 +38,18 @@ MULTILIB_MATCHES     =
+ # Not quite true.  We can support hard-vfp calling in Thumb2, but how do we
+ # express that here?  Also, we really need architecture v5e or later
+ # (mcrr etc).
++# Additional filtering will remove mfloat-abi=hard on thumb for all non-supported cores
++#*mthumb/*mfloat-abi=hard*
+ MULTILIB_OPTIONS       += mfloat-abi=hard
+ MULTILIB_DIRNAMES      += fpu
+-MULTILIB_EXCEPTIONS    += *mthumb/*mfloat-abi=hard*
++MULTILIB_EXCEPTIONS    += 
+ #MULTILIB_EXCEPTIONS    += *mcpu=fa526/*mfloat-abi=hard*
+ #MULTILIB_EXCEPTIONS    += *mcpu=fa626/*mfloat-abi=hard*
+ 
++MULTILIB_OPTIONS += mcpu=cortex-a15/mcpu=cortex-a5/mcpu=cortex-a7/mcpu=cortex-a8/mcpu=cortex-a9/mcpu=cortex-m0/mcpu=cortex-m0plus/mcpu=cortex-m1/mcpu=cortex-m3/mcpu=cortex-m4/mcpu=cortex-m7/mcpu=cortex-r4/mcpu=cortex-r4f/mcpu=cortex-r5
++MULTILIB_DIRNAMES += cortex_a15 cortex_a5 cortex_a7 cortex_a8 cortex_a9 cortex_m0 cortex_m0plus cortex_m1 cortex_m3 cortex_m4 cortex_m7 cortex_r4 cortex_r4f cortex_r5
++#MULTILIB_EXCEPTIONS += 
++
+ # MULTILIB_OPTIONS    += mcpu=ep9312
+ # MULTILIB_DIRNAMES   += ep9312
+ # MULTILIB_EXCEPTIONS += *mthumb/*mcpu=ep9312*
+diff -durNp gcc-7.4.0.orig/gcc/genmultilib gcc-7.4.0/gcc/genmultilib
+--- gcc-7.4.0.orig/gcc/genmultilib	2017-01-01 20:07:43.905435000 +0800
++++ gcc-7.4.0/gcc/genmultilib	2018-12-20 21:44:28.890625000 +0800
+@@ -140,6 +140,7 @@ multilib_required=$8
+ multiarch=$9
+ multilib_reuse=${10}
+ enable_multilib=${11}
++target_noncanonical=${12}
+ 
+ echo "static const char *const multilib_raw[] = {"
+ 
+@@ -241,6 +242,10 @@ EOF
+ 
+ fi
+ 
++if [ -e ../$(dirname $0)/genmultilib_filter_${target_noncanonical} ]; then
++   combinations=`perl ../$(dirname $0)/genmultilib_filter_${target_noncanonical} ${combinations}`
++fi
++
+ # Construct a sed pattern which will convert option names to directory
+ # names.
+ todirnames=
+diff -durNp gcc-7.4.0.orig/gcc/genmultilib_filter_arm-eabi gcc-7.4.0/gcc/genmultilib_filter_arm-eabi
+--- gcc-7.4.0.orig/gcc/genmultilib_filter_arm-eabi	1970-01-01 08:00:00.000000000 +0800
++++ gcc-7.4.0/gcc/genmultilib_filter_arm-eabi	2018-12-20 21:46:04.453125000 +0800
+@@ -0,0 +1,12 @@
++#!/bin/perl
++
++foreach (@ARGV)
++{
++	next if (/\/mcpu=cortex-m/ && !/\/mthumb\//);
++	next if (!/\/mcpu=cortex-/ && /\/mthumb\// && /\/mfloat-abi=hard\//);
++	next if (/\/mcpu=cortex-m0/ && /\/mthumb\// && /\/mfloat-abi=hard\//);
++	next if (/\/mcpu=cortex-m1/ && /\/mthumb\// && /\/mfloat-abi=hard\//);
++	
++	print;
++	print " ";
++}
+diff -durNp gcc-7.4.0.orig/gcc/Makefile.in gcc-7.4.0/gcc/Makefile.in
+--- gcc-7.4.0.orig/gcc/Makefile.in	2017-05-03 00:12:40.965506000 +0800
++++ gcc-7.4.0/gcc/Makefile.in	2018-12-20 21:47:02.125000000 +0800
+@@ -2021,6 +2021,7 @@ s-mlib: $(srcdir)/genmultilib Makefile
+ 	    "$(if $(MULTILIB_OSDIRNAMES),,$(MULTIARCH_DIRNAME))" \
+ 	    "$(MULTILIB_REUSE)" \
+ 	    "@enable_multilib@" \
++		"$(target_noncanonical)" \
+ 	    > tmp-mlib.h; \
+ 	else \
+ 	  $(SHELL) $(srcdir)/genmultilib '' '' '' '' '' '' '' '' \
+diff -durNp gcc-7.4.0.orig/libgcc/crtstuff.c gcc-7.4.0/libgcc/crtstuff.c
+--- gcc-7.4.0.orig/libgcc/crtstuff.c	2017-01-01 20:07:43.905435000 +0800
++++ gcc-7.4.0/libgcc/crtstuff.c	2018-12-20 21:47:51.937500000 +0800
+@@ -51,6 +51,7 @@ see the files COPYING3 and COPYING.RUNTI
+ /* FIXME: Including auto-host is incorrect, but until we have
+    identified the set of defines that need to go into auto-target.h,
+    this will have to do.  */
++#define USED_FOR_TARGET
+ #include "auto-host.h"
+ #undef caddr_t
+ #undef pid_t
+diff -durNp gcc-7.4.0.orig/libstdc++-v3/libsupc++/eh_terminate.cc gcc-7.4.0/libstdc++-v3/libsupc++/eh_terminate.cc
+--- gcc-7.4.0.orig/libstdc++-v3/libsupc++/eh_terminate.cc	2017-01-01 20:07:43.905435000 +0800
++++ gcc-7.4.0/libstdc++-v3/libsupc++/eh_terminate.cc	2018-12-20 21:49:03.687500000 +0800
+@@ -51,7 +51,7 @@ __cxxabiv1::__terminate (std::terminate_
+     { std::abort (); }
+ }
+ 
+-void
++void __attribute__((weak))
+ std::terminate () throw()
+ {
+   __terminate (get_terminate ());
+@@ -64,7 +64,7 @@ __cxxabiv1::__unexpected (std::unexpecte
+   std::terminate ();
+ }
+ 
+-void
++void __attribute__((weak))
+ std::unexpected ()
+ {
+   __unexpected (get_unexpected ());
+diff -durNp gcc-7.4.0.orig/libstdc++-v3/libsupc++/pure.cc gcc-7.4.0/libstdc++-v3/libsupc++/pure.cc
+--- gcc-7.4.0.orig/libstdc++-v3/libsupc++/pure.cc	2017-01-01 20:07:43.905435000 +0800
++++ gcc-7.4.0/libstdc++-v3/libsupc++/pure.cc	2018-12-20 21:49:53.781250000 +0800
+@@ -43,14 +43,14 @@
+ # define writestr(str) /* Empty */
+ #endif
+ 
+-extern "C" void
++extern "C" void __attribute__((weak))
+ __cxxabiv1::__cxa_pure_virtual (void)
+ {
+   writestr ("pure virtual method called\n");
+   std::terminate ();
+ }
+ 
+-extern "C" void
++extern "C" void __attribute__((weak))
+ __cxxabiv1::__cxa_deleted_virtual (void)
+ {
+   writestr ("deleted virtual method called\n");
diff --git a/packages/gcc/7.4.0/0104-gcc-configure.patch b/packages/gcc/7.4.0/0104-gcc-configure.patch
new file mode 100644
index 00000000..01f93027
--- /dev/null
+++ b/packages/gcc/7.4.0/0104-gcc-configure.patch
@@ -0,0 +1,12 @@
+diff -durN gcc-7.4.0.orig/gcc/configure gcc-7.4.0/gcc/configure
+--- gcc-7.4.0.orig/gcc/configure	2018-06-23 05:16:41.433339000 +0800
++++ gcc-7.4.0/gcc/configure	2019-07-06 08:53:58.853957200 +0800
+@@ -1505,6 +1505,8 @@
+   eval ac_cv_env_${ac_var}_value=\$${ac_var}
+ done
+ 
++[[ "$(uname)" == MINGW* && -n "${srcdir}" ]] && srcdir="$(cygpath -m ${srcdir})"
++
+ #
+ # Report the --help message.
+ #
diff --git a/packages/gcc/8.3.0/0100-configure.patch b/packages/gcc/8.3.0/0100-configure.patch
new file mode 100644
index 00000000..84cd2e1b
--- /dev/null
+++ b/packages/gcc/8.3.0/0100-configure.patch
@@ -0,0 +1,28 @@
+diff -durN gcc-8.3.0.orig/configure gcc-8.3.0/configure
+--- gcc-8.3.0.orig/configure	2019-02-22 22:22:13.000000000 +0800
++++ gcc-8.3.0/configure	2019-03-14 11:42:09.669340500 +0800
+@@ -1384,6 +1384,8 @@
+   eval ac_cv_env_${ac_var}_value=\$${ac_var}
+ done
+ 
++[[ "$(uname)" == MINGW* && -n "${srcdir}" ]] && srcdir="$(cygpath -m ${srcdir})"
++
+ #
+ # Report the --help message.
+ #
+@@ -7614,6 +7616,15 @@
+     ;;
+ esac
+ 
++# Check whether --with-local-prefix was given.
++if test "${with_local_prefix+set}" = set; then :
++  withval=$with_local_prefix;
++  if [ "$withval" != "" ] && [ -d "$withval/include" ] &&
++	! (grep -qP "\-isystem\s+$withval/include" <<< ${FLAGS_FOR_TARGET}); then
++     FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET" -isystem $withval/include"
++  fi
++fi
++
+ # Makefile fragments.
+ for frag in host_makefile_frag target_makefile_frag alphaieee_frag ospace_frag;
+ do
diff --git a/packages/gcc/8.3.0/0101-libgcc-configure.patch b/packages/gcc/8.3.0/0101-libgcc-configure.patch
new file mode 100644
index 00000000..ad614a59
--- /dev/null
+++ b/packages/gcc/8.3.0/0101-libgcc-configure.patch
@@ -0,0 +1,12 @@
+diff -durN gcc-8.3.0.orig/libgcc/configure gcc-8.3.0/libgcc/configure
+--- gcc-8.3.0.orig/libgcc/configure	2018-04-25 00:45:26.000000000 +0800
++++ gcc-8.3.0/libgcc/configure	2019-03-14 11:51:32.082291700 +0800
+@@ -1225,6 +1225,8 @@
+   eval ac_cv_env_${ac_var}_value=\$${ac_var}
+ done
+ 
++[[ "$(uname)" == MINGW* && -n "${srcdir}" ]] && srcdir="$(cygpath -m ${srcdir})"
++
+ #
+ # Report the --help message.
+ #
diff --git a/packages/gcc/8.3.0/0102-libgcc-mkheader_sh.patch b/packages/gcc/8.3.0/0102-libgcc-mkheader_sh.patch
new file mode 100644
index 00000000..455c6177
--- /dev/null
+++ b/packages/gcc/8.3.0/0102-libgcc-mkheader_sh.patch
@@ -0,0 +1,15 @@
+diff -durN gcc-8.3.0.orig/libgcc/mkheader.sh gcc-8.3.0/libgcc/mkheader.sh
+--- gcc-8.3.0.orig/libgcc/mkheader.sh	2018-01-03 18:03:58.000000000 +0800
++++ gcc-8.3.0/libgcc/mkheader.sh	2019-03-14 12:01:39.592851200 +0800
+@@ -34,7 +34,11 @@
+ done
+ 
+ for file in $HEADERS; do
++if [[ "$(uname)" == MINGW* ]]; then
++	echo "#include \"$(cygpath -m $file)\""
++else
+     echo "#include \"$file\""
++fi
+ done
+ 
+ # Add multiple inclusion protection guard, part two.
diff --git a/packages/gcc/8.3.0/0103-port-for-cortex-m.patch b/packages/gcc/8.3.0/0103-port-for-cortex-m.patch
new file mode 100644
index 00000000..3c0cfe11
--- /dev/null
+++ b/packages/gcc/8.3.0/0103-port-for-cortex-m.patch
@@ -0,0 +1,165 @@
+diff -durNp gcc-8.3.0.orig/gcc/config/arm/arm.c gcc-8.3.0/gcc/config/arm/arm.c
+--- gcc-8.3.0.orig/gcc/config/arm/arm.c	2019-02-11 17:26:31.000000000 +0800
++++ gcc-8.3.0/gcc/config/arm/arm.c	2019-03-14 16:34:30.902540800 +0800
+@@ -3375,10 +3375,45 @@ arm_option_override (void)
+ 
+   if (!global_options_set.x_arm_fpu_index)
+     {
++	  const char *target_fpu_name;
+       bool ok;
+       int fpu_index;
+ 
+-      ok = opt_enum_arg_to_value (OPT_mfpu_, FPUTYPE_AUTO, &fpu_index,
++#ifdef FPUTYPE_AUTO
++      target_fpu_name = FPUTYPE_AUTO;
++#else
++      target_fpu_name = "auto";
++#endif
++
++      if (global_options.x_arm_cpu_string == "cortex-m4" ||
++		  global_options.x_arm_cpu_string == "cortex-m7")
++	  {
++      	target_fpu_name = "fpv4-sp-d16";
++	  }
++	  else if (global_options.x_arm_cpu_string == "cortex-r4" ||
++			   global_options.x_arm_cpu_string == "cortex-r4f" ||
++			   global_options.x_arm_cpu_string == "cortex-r5" ||
++			   global_options.x_arm_cpu_string == "cortex-r7")
++	  {
++      	target_fpu_name = "vfpv3";
++      }
++	  else if (global_options.x_arm_cpu_string == "cortex-a5" ||
++			   global_options.x_arm_cpu_string == "cortex-a7")
++	  {
++      	target_fpu_name = "vfpv4-d16";
++	  }
++	  else if (global_options.x_arm_cpu_string == "cortex-a8" ||
++			   global_options.x_arm_cpu_string == "cortex-a9")
++	  {
++      	target_fpu_name = "vfpv3";
++	  }
++	  else if (global_options.x_arm_cpu_string == "cortex-a12" ||
++			   global_options.x_arm_cpu_string == "cortex-a15")
++	  {
++      	target_fpu_name = "vfpv4";
++	  }
++
++      ok = opt_enum_arg_to_value (OPT_mfpu_, target_fpu_name, &fpu_index,
+ 				  CL_TARGET);
+       gcc_assert (ok);
+       arm_fpu_index = (enum fpu_type) fpu_index;
+diff -durNp gcc-8.3.0.orig/gcc/config/arm/t-arm-elf gcc-8.3.0/gcc/config/arm/t-arm-elf
+--- gcc-8.3.0.orig/gcc/config/arm/t-arm-elf	2018-01-11 23:21:26.000000000 +0800
++++ gcc-8.3.0/gcc/config/arm/t-arm-elf	2019-03-14 16:14:37.290721000 +0800
+@@ -75,6 +75,10 @@ MULTILIB_DIRNAMES    += v5te v7
+ MULTILIB_OPTIONS     += mfloat-abi=hard
+ MULTILIB_DIRNAMES    += fpu
+ 
++MULTILIB_OPTIONS += mcpu=cortex-a15/mcpu=cortex-a5/mcpu=cortex-a7/mcpu=cortex-a8/mcpu=cortex-a9/mcpu=cortex-m0/mcpu=cortex-m0plus/mcpu=cortex-m1/mcpu=cortex-m3/mcpu=cortex-m4/mcpu=cortex-m7/mcpu=cortex-r4/mcpu=cortex-r4f/mcpu=cortex-r5
++MULTILIB_DIRNAMES += cortex_a15 cortex_a5 cortex_a7 cortex_a8 cortex_a9 cortex_m0 cortex_m0plus cortex_m1 cortex_m3 cortex_m4 cortex_m7 cortex_r4 cortex_r4f cortex_r5
++#MULTILIB_EXCEPTIONS += 
++
+ # Build a total of 4 library variants (base options plus the following):
+ MULTILIB_REQUIRED    += mthumb
+ MULTILIB_REQUIRED    += marm/mfpu=auto/march=armv5te+fp/mfloat-abi=hard
+diff -durNp gcc-8.3.0.orig/gcc/genmultilib gcc-8.3.0/gcc/genmultilib
+--- gcc-8.3.0.orig/gcc/genmultilib	2018-01-03 18:03:58.000000000 +0800
++++ gcc-8.3.0/gcc/genmultilib	2019-03-14 16:14:37.290721000 +0800
+@@ -140,6 +140,7 @@ multilib_required=$8
+ multiarch=$9
+ multilib_reuse=${10}
+ enable_multilib=${11}
++target_noncanonical=${12}
+ 
+ echo "static const char *const multilib_raw[] = {"
+ 
+@@ -240,6 +241,10 @@ EOF
+ 
+ fi
+ 
++if [ -e ../$(dirname $0)/genmultilib_filter_${target_noncanonical} ]; then
++   combinations=`perl ../$(dirname $0)/genmultilib_filter_${target_noncanonical} ${combinations}`
++fi
++
+ # Construct a sed pattern which will convert option names to directory
+ # names.
+ todirnames=
+diff -durNp gcc-8.3.0.orig/gcc/genmultilib_filter_arm-eabi gcc-8.3.0/gcc/genmultilib_filter_arm-eabi
+--- gcc-8.3.0.orig/gcc/genmultilib_filter_arm-eabi	1970-01-01 08:00:00.000000000 +0800
++++ gcc-8.3.0/gcc/genmultilib_filter_arm-eabi	2019-03-14 16:40:07.161941500 +0800
+@@ -0,0 +1,12 @@
++#!/bin/perl
++
++foreach (@ARGV)
++{
++	next if (/\/mcpu=cortex-m/ && !/\/mthumb\//);
++	next if (!/\/mcpu=cortex-/ && /\/mthumb\// && /\/mfloat-abi=hard\//);
++	next if (/\/mcpu=cortex-m0/ && /\/mthumb\// && /\/mfloat-abi=hard\//);
++	next if (/\/mcpu=cortex-m1/ && /\/mthumb\// && /\/mfloat-abi=hard\//);
++	
++	print;
++	print " ";
++}
+diff -durNp gcc-8.3.0.orig/gcc/Makefile.in gcc-8.3.0/gcc/Makefile.in
+--- gcc-8.3.0.orig/gcc/Makefile.in	2018-03-09 23:24:44.000000000 +0800
++++ gcc-8.3.0/gcc/Makefile.in	2019-03-14 16:14:37.306347500 +0800
+@@ -2087,6 +2087,7 @@ s-mlib: $(srcdir)/genmultilib Makefile
+ 	    "$(if $(MULTILIB_OSDIRNAMES),,$(MULTIARCH_DIRNAME))" \
+ 	    "$(MULTILIB_REUSE)" \
+ 	    "@enable_multilib@" \
++		"$(target_noncanonical)" \
+ 	    > tmp-mlib.h; \
+ 	else \
+ 	  $(SHELL) $(srcdir)/genmultilib '' '' '' '' '' '' '' '' \
+diff -durNp gcc-8.3.0.orig/libgcc/crtstuff.c gcc-8.3.0/libgcc/crtstuff.c
+--- gcc-8.3.0.orig/libgcc/crtstuff.c	2018-01-03 18:03:58.000000000 +0800
++++ gcc-8.3.0/libgcc/crtstuff.c	2019-03-14 16:14:37.306347500 +0800
+@@ -51,6 +51,7 @@ see the files COPYING3 and COPYING.RUNTI
+ /* FIXME: Including auto-host is incorrect, but until we have
+    identified the set of defines that need to go into auto-target.h,
+    this will have to do.  */
++#define USED_FOR_TARGET
+ #include "auto-host.h"
+ #undef caddr_t
+ #undef pid_t
+diff -durNp gcc-8.3.0.orig/libstdc++-v3/libsupc++/eh_terminate.cc gcc-8.3.0/libstdc++-v3/libsupc++/eh_terminate.cc
+--- gcc-8.3.0.orig/libstdc++-v3/libsupc++/eh_terminate.cc	2018-01-03 18:03:58.000000000 +0800
++++ gcc-8.3.0/libstdc++-v3/libsupc++/eh_terminate.cc	2019-03-14 16:14:37.321973400 +0800
+@@ -51,7 +51,7 @@ __cxxabiv1::__terminate (std::terminate_
+     { std::abort (); }
+ }
+ 
+-void
++void __attribute__((weak))
+ std::terminate () throw()
+ {
+   __terminate (get_terminate ());
+@@ -64,7 +64,7 @@ __cxxabiv1::__unexpected (std::unexpecte
+   std::terminate ();
+ }
+ 
+-void
++void __attribute__((weak))
+ std::unexpected ()
+ {
+   __unexpected (get_unexpected ());
+diff -durNp gcc-8.3.0.orig/libstdc++-v3/libsupc++/pure.cc gcc-8.3.0/libstdc++-v3/libsupc++/pure.cc
+--- gcc-8.3.0.orig/libstdc++-v3/libsupc++/pure.cc	2018-01-03 18:03:58.000000000 +0800
++++ gcc-8.3.0/libstdc++-v3/libsupc++/pure.cc	2019-03-14 16:14:37.321973400 +0800
+@@ -43,14 +43,14 @@
+ # define writestr(str) /* Empty */
+ #endif
+ 
+-extern "C" void
++extern "C" void __attribute__((weak))
+ __cxxabiv1::__cxa_pure_virtual (void)
+ {
+   writestr ("pure virtual method called\n");
+   std::terminate ();
+ }
+ 
+-extern "C" void
++extern "C" void __attribute__((weak))
+ __cxxabiv1::__cxa_deleted_virtual (void)
+ {
+   writestr ("deleted virtual method called\n");
diff --git a/packages/gcc/8.3.0/0104-gcc-configure.patch b/packages/gcc/8.3.0/0104-gcc-configure.patch
new file mode 100644
index 00000000..bb0cb43e
--- /dev/null
+++ b/packages/gcc/8.3.0/0104-gcc-configure.patch
@@ -0,0 +1,12 @@
+diff -durN gcc-8.3.0.orig/gcc/configure gcc-8.3.0/gcc/configure
+--- gcc-8.3.0.orig/gcc/configure	2018-04-18 17:46:58.000000000 +0800
++++ gcc-8.3.0/gcc/configure	2019-07-06 08:31:27.980744000 +0800
+@@ -1511,6 +1511,8 @@
+   eval ac_cv_env_${ac_var}_value=\$${ac_var}
+ done
+ 
++[[ "$(uname)" == MINGW* && -n "${srcdir}" ]] && srcdir="$(cygpath -m ${srcdir})"
++
+ #
+ # Report the --help message.
+ #
-- 
2.22.0.windows.1

