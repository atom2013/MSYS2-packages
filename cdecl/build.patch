 Makefile | 16 +++++++++-------
 cdecl.c  | 14 +++++++-------
 2 files changed, 16 insertions(+), 14 deletions(-)

diff --git a/Makefile b/Makefile
index 1643b74..1d15048 100644
--- a/Makefile
+++ b/Makefile
@@ -15,13 +15,13 @@
 #
 # add -DUSE_READLINE	To compile in support for the GNU readline library.
 
-CFLAGS= -g -O2
+CFLAGS= -g -O2 -DUSE_READLINE
 CC= gcc
-LIBS= 
+LIBS=-ledit
 ALLFILES= makefile cdgram.y cdlex.l cdecl.c cdecl.1 testset testset++
-BINDIR= /usr/bin
-MANDIR= /usr/man/man1
-CATDIR= /usr/man/cat1
+BINDIR= $(PREFIX)/usr/bin
+MANDIR= $(PREFIX)/usr/share/man/man1
+CATDIR= $(PREFIX)/usr/man/cat1
 INSTALL= install -c
 INSTALL_DATA= install -c -m 644
 
@@ -33,18 +33,20 @@ c++decl: cdgram.c cdlex.c cdecl.c
 	rm -f cdecl
 
 cdlex.c: cdlex.l
-	lex cdlex.l && mv lex.yy.c cdlex.c
+	lex -ocdlex.c cdlex.l
 
 cdgram.c: cdgram.y
-	yacc cdgram.y && mv y.tab.c cdgram.c
+	yacc -ocdgram.c cdgram.y
 
 test:
 	./cdecl < testset
 	./c++decl < testset++
 
 install: cdecl
+	$(INSTALL) -d $(BINDIR)
 	$(INSTALL) cdecl $(BINDIR)
 	ln -s cdecl $(BINDIR)/c++decl
+	$(INSTALL) -d $(MANDIR)
 	$(INSTALL_DATA) cdecl.1 $(MANDIR)
 	$(INSTALL_DATA) c++decl.1 $(MANDIR)
 
diff --git a/cdecl.c b/cdecl.c
index 73ad493..2418306 100644
--- a/cdecl.c
+++ b/cdecl.c
@@ -93,12 +93,12 @@ void free(), exit(), perror();
 #endif /* __STDC__ || DOS */
 
 #ifdef USE_READLINE
-# include <readline/readline.h>
+# include <editline/readline.h>
   /* prototypes for functions related to readline() */
-  char * getline();
+  char * _getline();
   char ** attempt_completion(char *, int, int);
   char * keyword_completion(char *, int);
-  char * command_completion(char *, int);
+  char * command_completion(const char *, int);
 #endif
 
 /* maximum # of chars from progname to display in prompt */
@@ -379,7 +379,7 @@ char *options[] = {
 static char *line_read = NULL;
 
 /* Read a string, and return a pointer to it.  Returns NULL on EOF. */
-char * getline ()
+char * _getline ()
 {
   /* If the buffer has already been allocated, return the memory
      to the free pool. */
@@ -408,7 +408,7 @@ char ** attempt_completion(char *text, int start, int end)
   return matches;
 }
 
-char * command_completion(char *text, int flag)
+char * command_completion(const char *text, int flag)
 {
   static int index, len;
   char *command;
@@ -891,7 +891,7 @@ int dostdin()
 
 	if (!quiet) (void) printf("Type `help' or `?' for help\n");
 	ret = 0;
-	while ((line = getline())) {
+	while ((line = _getline())) {
 	    if (!strcmp(line, "quit") || !strcmp(line, "exit")) {
 		free(line);
 		return ret;
@@ -1255,7 +1255,7 @@ char **argv;
 
 #ifdef USE_READLINE
     /* install completion handlers */
-    rl_attempted_completion_function = (CPPFunction *)attempt_completion;
+    rl_attempted_completion_function = (rl_completion_func_t *)attempt_completion;
     rl_completion_entry_function = (Function *)keyword_completion;
 #endif
 
